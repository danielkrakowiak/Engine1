Fri 21.02.2014 - 7h - Starting project, math library, BlockMesh class, loading .obj files
Sat 22.02.2014 - 7h - Reading on Smart Pointers, loading .obj files - loading vertices, configuring project to add unit tests
Sun 23.02.2014 - 1h - Fighting with locked unittest.dll - test locked because of memory allocation error
Mon 24.02.2014 - 5h - Loading .obj files, parsing faces, checking for duplicated vertices
Thu 27.02.2014 - 4h - Loading .obj files, float comparing functions, mesh unit tests
Fri 28.02.2014 - 2h - Image library selection, FreeImage library download, setup, Texture class
--- February 2014 - 26h
Thu 06.03.2014 - 3h - Adding BlockModel class, adding getters to Texture2D, adding texture unit tests
Fri 07.03.2014 - 5h - Adding ComplexModel, BlockModelLOD, BlockMeshLOD classes, adding mip map support to Texture2D
Sun 16.03.2014 - 2h - Adding AssetManager, multithreaded assets loading, BasicAsset class
Wed 19.03.2014 - 2h - Transforming TextureFileFormat into AssetFileFormat to allow BlockMesh and Texture2D derive from BasicAsset
Thu 20.03.2014 - 4h - Fixing bugs in AssetManager, adding AssetManager unit tests
Fri 21.03.2014 - 1h - Looking for a bug in mesh loading
Thu 27.03.2014 - 2h - Looking for a bug in mesh loading, added TestAssets folder with assets used for tests 
Fri 28.03.2014 - 2h - Added float43 class, adding mesh test, profiling mesh loading, handling case when multiple assets with the same path are loaded in AssetManager
Sat 29.03.2014 - 1h - Added Application, InputManager, window setup
--- March 2014 - 22h
Wed 02.04.2014 - 5h - Added Direct3DRenderer, cleaned window creation, improved Windows message handling
Fri 04.04.2014 - 5h - Cleaning Direct3D initialization - splitting one big method into submethods, adding vertex and index buffers to BlockMesh
Sat 05.04.2014 - 1h - Added emission textures to BlockModel, added ModelTexture2D for storing texture together with its texcoordIndex and color multipliers
Sun 06.04.2014 - 3h - Writing VertexShader, FragmentShader class, pasing parameters, setting pipeline state, BlockMeshFragmentShader, BlockMeshVertexShader, shader inheritance, drawing first 3d model
Wed 09.04.2014 - 6h - Removing usage of D3DX lib, headers from the project (deprecated in Direct3D), adding float44 class, adding some D3DX funcionality (projections etc) to MathUtil, downloading and installing CUDA 6.0, new drivers, NSIGHT 4.0, trying to solve a problem with transformations after moving from D3DX lib to own code (problem: incorrect float44 transpose)
Fri 11.04.2014 - 1h - Fixing problem with passing buffers to shaders
Sat 12.04.2014 - 3h - Adding new shader - BlockModelShader - for drawing models with textures, loading textures to GPU
Tue 15.04.2014 - 1h - Fixing texture color problem - usage of bgr format instead of rgb
Wed 16.04.2014 - 1h - Trying to fix the problem with missing triangles in meshes loaded from .obj files, added support for meshes with only some faces having normals, texcoords
--- April 2014 - 26h
Fri 06.06.2014 - 1h - Fixing mesh loading from .obj files (crashes on end of file in some cases, missing triangles)
Sat 07.06.2014 - 2h - Trying to fix .obj mesh loading
Fri 20.06.2014 - 1h - Added Camera class
Sun 22.06.2014 - 2h - Created key mapping in InputManager, added Timer class for measuring time lapse
Fri 27.06.2014 - 2h - Added FreeCamera class, implemented camera navigation and view transformations, connected camera to mouse move and keyboard
Sat 28.06.2014 - 4h - Reading on Unicode issues, deciding on usage of UTF-8 internally everywhere, creating Rules.txt with text handling rules, created StringUtil to handle text conversions from UTF-8 to UTF-16 WinAPI. Looking for a Logger. Trying to use easylogger++.
--- June 2014 - 12h
Sun 07.09.2014 - 4h - Getting back to work, trying to run easylogging++ (failed - included header showed errors), fixed loading .obj bug (holes in geometry) (quad -> triangle incorrect conversion), fixed printing to the VS output window, trying to fix uppercasing/lowercasing utf8 strings
Wed 10.09.2014 - 3h - Drawing text using freetype lib
Thu 11.09.2014 - 1h - Drawing text using freetype lib
Fri 12.09.2014 - 5h - Drawing text using freetype lib
Sat 13.09.2014 - 8h - Drawing text using freetype lib, trying to fix an exception from graphics driver (Direct3D crashes), fixed "access violation" in graphics driver .dll - solved by installing a driver update, trying to clean up transformations, vertex ordering etc.
Sun 14.09.2014 - 6h - Fixing camera rotation by mouse movement (no more Windows callbacks on mouse move - checking cursor pos every frame), fixed row-major/column-major issues and transformation order in HLSL code and when passing matrices to shaders, fixed issues with culling (only backfacing triangles were visible) - inverting z-coordinate and texture v-coordinate (as explained in rules) was needed when loading model from file (model was in RH coordinate system -> rendering in LH)
Mon 15.09.2014 - 4h - Fixed drawing text (vertices were had to be in clockwise order, depth > 0, correct stride setting in buffer), added alpha blending to text display, fixed camera movement (also caused by delayed Windows key press messages processing - only one msg was processed per frame), reorganized Direct3DRenderer (shaders - compilation, passing params - are managed by the renderer)
Sun 21.09.2014 - 1h - Refactoring Direc3DRenderer
Mon 22.09.2014 - 2h - Improving asset inheritence (assets get all needed args on creation)
Wed 24.09.2014 - 2h - Reading about skeletal animation
Thu 25.09.2014 - 6h - Reading about skeletal animation, implementing RiggedMesh, SkeletonModel, SkeletonShader etc classes - storing and rendering simple skeletal mesh
Mod 29.09.2014 - 6h - Including Assimp libary into the code, loading .dae files into BlockMesh, fixing mesh loading tests after refactoring loading code
Tue 30.09.2014 - 2h - Fixing tests and linking in test project
--- September 2014 - 50h
Sun 05.10.2014 - 2h - Fixing bugs in BlockMesh, Texture2D (path wasn't lowercased), fixing StringUtil lowercaseing/uppercasing, adding message and throwing method name to all exceptions
Tue 07.10.2014 - 2h - Improving tests for Texture2D, BlockMesh, writing MathUtil tests, enabling multithreaded build in VS
Sun 13.10.2014 - 2h - Loading .dae files into RiggedMesh - loading bones and weights
Wed 22.10.2014 - 1h - Passing bones' bindPose and pose to SkeletonVertexShader, passing mesh's vertex bones and weights
Fri 31.10.2014 - 3h - Creating bones/weight buffers on GPU, creating input layout for VS, added Direct3DUtil - allows to assign names to D3D resources for easier debug, trying to figure out why skeleton data is not available in the shader 
--- October 2014 - 10h
Thu 06.11.2014 - 2h - Fixing vertex/bone transformations in skeleton vs, added new method to float44 for inverting a transformation matrix (scale + rotation + translation), passed inverted bindPose to skeleton vs
Sat 08.11.2014 - 4h - Writing tests for float44::getScaleRotationTranslationInverse(), added default parameter values for MathUtill::areEqual, created tests playlists with fast and slow tests, fixed float44::getScaleRotationTranslationInverse()
Mon 10.11.2014 - 3h - Created XAFFileParser, SkeletonPose, SkeletonAnimation classes, included xml parser in the project, writing .xaf file parser for loading animations from 3Ds Max  
Fri 14.11.2014 - 1h - Writing XAFFileParser - parsing matrix from text, iterating through the nodes
Sat 15.11.2014 - 3h - Added reading of bones names in DAEFileParser, added finding bone by name in XAFFileParser, modified mesh/anim files to contain no spaces in bone names, added check for duplicated bone names in DAEFileParser
Sun 16.11.2014 - 5h - Tried to fix exporting skeleton meshes to .dea in 3ds Max - seemed like not all the bones where exported. Installed OpenCollada exporter, but it made no difference. Reason seems to be in Assimp importer, which reads bones from joints only - last bones in chain are not loaded (their bind poses). Added bones ordering in per vertex data, so they were ordered by descending weight. Renamed SkeletonMesh to RiggedMesh. Added SkeletonBonePose class.
Thu 20.11.2014 - 4h - Modified SkeletonPose from a simple vector of poses to a proper class with methods to access bones. Implemented a feature - SkeletonPose recalculates bones pose in skeleton space when needed (user doesn't have to worry about that). Added SkeletonPose::combinePoses() method to combine two poses into one. (propbably not working correctly).
Sat 22.11.2014 - 4h - Added Bone inner class to SkeletonMesh - SkeletonMesh now stores all the information about skeleton structure.
Sun 23.11.2014 - 5h - Integrating recent code changes, modified .dea parser to create skeleton structure in SkeletonMesh, modified .xaf parser to use SkeletonMesh as a source of information about skeleton structure. Modified SkeletonMeshVertexShader to use SkeletonMesh and SkeletonPose as a source of bone poses. Trying to debug incorrect skeletal transformations. Creating simple two-bone/two-boxes skeleton model for tests.
Tue 25.11.2014 - 4h - Found reason of incorrect skeleton rendering - final bone pose should be in it's own bind space, not in skeleton space (means that we are interested how far it moved from it's bind pose, not how far it moved from the skeleton origin). To fix this problem we need to multiply bone's pose in skeleton space by it's bind pose (or calculate it differently). Trying to fix the problem with soem vertices in the skeleton being exploded in some direction. Seems like some vertices aren't attached to any bones despite vertex-bone data presence in the buffer. Installed newest driver.
--- November 2014 - 35h
Sat 20.12.2014 - 1h - Found a workaround to incorrect skeleton rendering - setting vertex-bones buffer offset during rendering to -1.
Sun 21.12.2014 - 2h - Fixed skeleton rendering - reason: shader input layout for bones and weights had AlignedByteOffset property set to some value instead of 0. Info about stride is set during drawing, not in the input layout. 
Thu 25.12.2014 - 7h - Rewriting SkeletonPose to be independent from the space in which bones' poses are defined (to avoid confusion and complex code). 
Sat 27.12.2014 - 5h - Finishing changes to SkeletonPose and XAFFileParser. Fixing constness of some methods and return values in BlockMesh and BlockModel.
Sun 28.12.2014 - 3,5h - Fixing constness of some methods and return values in SkeletonMesh, SkeletonModel. Fixing transformations in SkeletonPose::calculatePoseInParentSpace.
--- December 2014 - 18h

--- 2014 - 199h

Sat 21.03.2015 - 2h - Added transformation of normals in skeleton mesh shader. Added new test model for skeleton mesh.
--- March 2015 - 2h
Sun 19.04.2015 - 2h - Refactoring. Removing loading assets methods from asset classes.
--- April 2015 - 2h
Fri 01.05.2015 - 4h - Installed VisualAssist and Cppcheck. Refactoring Texture2D class.
Sat 02.05.2015 - 1h - Refactoring Texture2D class.
Sat 09.05.2015 - 8h - Added RenderTargetTexture2D and RenderTargetDepthTexture2D. Refactored tests for Texture2D.
Sun 10.05.2015 - 3h - Refactoring Texture2D tests, planning on refactoring of Direct3DRenderer into 3 renderers. 
Mon 11.05.2015 - 2h - Added Direct3DRendererCore.
Wed 13.05.2015 - 2h - Added Direct3DDeferredRenderer.
Thu	14.05.2015 - 2h - Refactoring Direct3DFrameRenderer.
Sat 16.05.2015 - 5h - Added RectangleMesh, RenderTarget2D, RenderTargetDepth2D. Refactoring Direct3DFrameRenderer.
Sun 17.05.2015 - 3h - Added TextureVertexShader, TextureFragmentShader.
Mon 18.05.2015 - 2h - Modified shaders to output to multiple render targets, fixed some bugs and started deferred renderer.
Tue 19.05.2015 - 1h - Rendering DeferredRenderer output through FrameRenderer.
Wed 20.05.2015 - 5h - Fixed deferred rendering (pixels not showing on screen) by disabling depth test in depth stencil state. Debugging with Nsight and VS built in graphics debugger.
Mon 25.05.2015 - 2h - Trying to fix problem with deferred rendered meshes failing depth test.
--- May 2015 - 40h
Sat 13.06.2015 - 1h - Fixed depth culling problem. Reason: incorrect combination of depth texture format, depth stencil view format and shader resource format.
Fri 20.06.2015 - 2h - Prototyped space partitioning hierarchy. Modified BlockModel shaders and SkeletonMesh shaders to work with Deferred Rendering.
Sat 21.06.2015 - 4h - Refactored BlockMesh - loading from file in a static method. Refactored BlockMeshTests accordingly. Added tests for loading mesh from CPU to GPU.
Sun 22.06.2015 - 4h - Added initializing/deinitializing FreeImage libarary statically in a new ImageLibrary class. Same for FreeType library. Fixing and refactoring text rendering to be in DeferredRenderer and use RendererCore. Debugging blend state problems.
Wed 24.06.2015 - 1h - Fixed text rendering pixel shader.
Thu 25.06.2015 - 2h - Fixed text background no-transparency problem. (Alpha writes were unnecessarily enabled in DeferredRenderer and there was unnecessary alpha blending enabled in FrameRenderer - pixels with alpha were not rendered to final frame).
Fri 26.06.2015 - 1h - Added deviceContext member to RendererCore and removed it from methods' arguments.
Sat 27.06.2015 - 5h - Refactored SkeletonMesh - loading from file in a static method. Switching to use Microsoft::WRL::ComPtr for storing Direct3D pointers in all classes - to avoid not freeing resources.
--- June 2015 - 20h
Thu 02.07.2015 - 2h - Fixed problem of leaking Direct3D resources.
Wed 08.07.2015 - 1h - Trying to debug incorrect SkeletonMesh rendering with Graphics Debugger.
Thu 09.07.2015 - 2h - Trying to debug incorrect SkeletonMesh rendering with Graphics Debugger.
Fri 10.07.2015 - 2h - Trying to debug incorrect SkeletonMesh rendering with Graphics Debugger. Fixed problem with incorrect blend weights in shader input. Reason: Some buffers were set multiple times at different slots. Instead, each buffer should be set once, but referenced multiple times in input layout (as input slot). Enabled debug and disabled optimizations in shader compilation (only for debug configurations) - to enable shader debugging in Graphics Debugger.
Sat 11.07.2015 - 7h - Fixed problem with SkeletonMesh rendering. Error was caused by misspelling in the shader. Removing old "to-do" notes. Added locking cursor position only when the window has focus. Modified skeleton mesh vertex shader to run in loop - for readibility and ease of increasing 'max bones per vertex' count - (needed to use 'unroll' modifier to make it compile).
Sun 12.07.2015 - 4h - Optimizing SkeletonMesh vertex shader and class to pass boneIndices and weights to shader using fewer vertex attributes and to allow meshes to store only as many weights/indices as they need, without having extra zeros to match vertex attributes. Reading on enums and re-organizing them.
Mon 13.07.2015 - 1h - Finished modifications in SkeletonMesh vertex shader.
Thu 16.07.2015 - 3h - Bought Visual Assist. Added bonesPerVertex param in SkeletonMesh vertex shader. Refactored SkeletonAnimation to read files statically. Fixed problem with File class reading files having garbage at the end.
Sat 18.07.2015 - 8h - Preparing skeleton poses for test in 3ds Max. Working on blending/combining skeleton poses. Reading on quaternions in "Math Primer" book. Implementing quaternion class.
Sun 19.07.2015 - 2h - Matrix <-> quaternion conversions. Matrix slerp. Blending SkeletonMesh poses.
Mon 20.07.2015 - 4h - Major refactoring of XAF file parser. Parsing multiple poses from different animation frames and saving them in SkeletonAnimation.
Tue 21.07.2015 - 1h - Refactoring of XAF file parser.
Wed 22.07.2015 - 4h - Refactoring of XAF file parser. Converting SkeletonAnimation between skeleton/parent space. Creating test animation in 3ds Max. Blending poses between keyframes.
Thu 23.07.2015 - 2h - Trying to fix issues with incorrect blending of poses in parent space (dealing with 'last in the chain' bones).
Fri 24.07.2015 - 3h - Refactoring of blending and skeleton <-> parent space transformations for SkeletonMesh. Loading multiple meshes from a single .obj/.dae file. Trying to load a complex skeleton mesh.
--- July 2015 - 46h
Sun 13.09.2015 - 3h - Fixed problem with very thin skeleton mesh - caused by an animation file with some bones missing which contained scaling. Added lerp operation on float33. Debugging incorrect interpolation between skeleton poses. 
Thu 24.09.2015 - 2h - Debugging problem with malformed animated meshes. Problem is related to matrix slerp. Added some tests for quaternion slerp.
--- September 2015 - 5h
Wed 28.10.2015 - 4h - Fixed incorrect quaternion -> matrix conversion. A symbol in the formula was incorrect - caused by a mistake in the book :).
Thu 29.10.2015 - 4h - Setting up Git and publishing the project to GitHub. Desiging scene space partitioning and scene storage, saving to file etc.
Fri 30.10.2015 - 5h - Saving BlockModel, Texture2D, ModelTexture2D to file. 
Sat 31.10.2015 - 5h - Saving BlockModel, Texture2D, ModelTexture2D to file. 
--- October 2015 - 18h
Sun 01.11.2015 - 3h - Loading BlockModel, Texture2D, ModelTexture2D from file. 
Mon 02.11.2015 - 2h - Loading BlockModel, Texture2D, ModelTexture2D from file. 
Fri 06.11.2015 - 3h - Loading BlockModel, Texture2D, ModelTexture2D from file.
Sat 07.11.2015 - 4h - Fixed problem with texcoords not loading with Assimp. Added rendering of textured skeleton models.
Sun 08.11.2015 - 4h - Separating asset classes from their file information. Added BlockMeshFileInfo class.
Mon 09.11.2015 - 2h - Separating asset classes from their file information. Added SkeletonMeshFileInfo, Texture2DFileInfo classes. Fixing AssetManager.
Tue 10.11.2015 - 1h - Fixing AssetManager.
Wed 11.11.2015 - 5h - Fixed AssetManager. Unified TextFile and BinaryFile vector inner type. Fixed AssetManager tests. Added support to AssetManager for assets from the same path, but with different index in file.
Thu 12.11.2015 - 3h - Added AssetManager::getWhenLoaded() method. Added 'performance' test in AssetManager.
Fri 13.11.2015 - 1h - Adding support for loading assets with sub-assets in AssetManager.
Mon 16.11.2015 - 3h - Added support for loading assets with sub-assets in AssetManager.
Sat 28.11.2015 - 9h - Loading/creating/combining new assets through drag&drop. Made SkeletonAnimation an asset. Fixed timeout values in some tests. Added tests for loading the animations. Added BlockActor and SkeletonActor classes.
Sun 29.11.2015 - 5h - Added Scene class. Added option to drag&drop assets to the scene. Using AssetManager in Application. Adding support for loading different types of assets (ex. BlockMesh and SkeletonMesh) from the same path in AssetManager.
Mon 30.11.2015 - 1h - Putting all the classes in namespace Engine1.
--- November 2015 - 46h
Tue 01.12.2015 - 2h - Updated tests after changes to AssetManager. Fixing project configuration for x64. Downloaded new FreeImage library for x32 and x64.
Wed 02.12.2015 - 3h - Fixed project config for x64 and Freetype library for x64. Fixed problem with loading a model through AssetManager which has sub-assets which were already loaded before.
Fri 04.12.2015 - 2h - Fixed some AssetManager tests. Adding saving Scene to a file.
Sat 05.12.2015 - 6h - Adding saving/loading scene to/from a file. Added BlockModelFileInfoParser and SkeletonModelFileInfoParser. Added a param to loadCpuToGpu methods to allow loading only the assets which haven't been loaded yet.
Sun 06.12.2015 - 2h - Fixed problem with missing file info for assets loaded asynchronously through AssetManager.
Tue 08.12.2015 - 5h - Added Light, PointLight classes. Prepared light bulb mesh to display lights in the scene. Added loading/saving lights with the scene.
Wed 09.12.2015 - 1h - Unified all parsers to use iterators as params. Removed 'file type identifier' checks from parsers.
Thu 10.12.2015 - 6h - Fixed problem with UnitTests project having different current path than Engine1 project. Added loading a scene on drag&drop, saving on Ctrl + S. Separated main rendering code into Renderer class.
Sun 27.12.2015 - 4h - Added RaytraceRenderer, ComputeShader classes. Fixed remembering of currently bound shader in RendererCore class. Compiled some trivial compute shader. Read code samples for writing to texture from compute shader.
Mod 28.12.2015 - 3h - Added ComputeTargetTexture2D class. Fixed remembering of currently bound render targets. Added unbinding shaders, render targets, buffers etc.
Tue 29.12.2015 - 3h - Successfully run a compute shader. Some testing and learning on compute shader thread ids. Added a method to generate primary rays in compute shader.
Wed 30.12.2015 - 4h - Passed camera state to the compute shader and generated the primary rays. Added an ability to switch views on keyboard button (albedo, normal, reflection etc). Started creating raytracing shader.
Thu 31.12.2015 - 6h - Managed to read texture in CS and write to uav in one shader. Raytraced first bounding box in CS. Discovering ways to pass vertex buffer to the compute shader (as vertex buffer can't be used as a shader reasource).
--- December 2015 - 47h

--- 2015 - 226h

Fri 01.01.2016 - 2h - Passed vertex and triangle data to the compute shader. Trying to raytrace the triangle mesh.
Sat 02.01.2016 - 6h - Successfully raytraced triangle mesh.
Sun 03.01.2016 - 3h - Fixed various project setup issues. Added x64 platform for UnitTests project. Enabled compilation of shaders in the build. Added bounding box to meshes.
Mon 04.01.2016 - 3h - Fixed raytracing slightly incorrect primary rays directions (FOV related). Added an option to rotate actors in the scene. Removed Assimp source code from the project and linked to it's libary. Removed all causes of warnings from the code.
Tue 05.01.2016 - 5h - Compiled Assimp and replaced wrong Assimp dlls and libs. Fixed non-working texture swapping in BlockModel/SkeletonModel. Fixed some bugs related to the refactored code.
Fri 29.01.2016 - 4h - Thinking how to refactor texture, render target, compute target classes into something more general and configurable + add new functionality.
--- January 2016 - 23h
Sat 06.02.2016 - 3h - Creating new texture class which supports multiple usages, bindings, types and formats.
Sun 07.02.2016 - 3h - Creating new texture class.
Thu 11.02.2016 - 3h - Creating new texture class - loading from file.
Fri 12.02.2016 - 3h - Creating new texture class - static methods, splitting into files, separating declarations from definitions.
Sat 13.02.2016 - 5h - Creating new texture class - tidying up, fixing, some basic testing.
Sat 20.02.2016 - 7h - Creating new texture class - loading to/from CPU/GPU, adding missing interface. Creating first tests. Modyfing class to take 'format' param in constructor rather than as a template param. Trying to create many version of constructors without code duplication with std::enable_if.
Sun 21.02.2016 - 3h - Creating new texture class - creating various version of constructors which take 1, 2 or 3 format arguments.
Mon 22.02.2016 - 4h - Creating new texture class - writing tests, polishing, removing unsupported binding configurations.
Sat 27.02.2016 - 2h - Creating new texture class - writing tests. Adding static assert to check if given texture configuration is supported.
Mon 29.02.2016 - 2h - Creating new texture class - writing tests.
--- February 2016 - 35h
Tue 01.03.2016 - 2h - Creating new texture class - trying to write a cast operator from texture with specific binding to a texture with no bindings.
Sun 13.03.2016 - 2h - Creating new texture class - Modified TTexture2DInternal class to not use TexUsage and TexBind as template arguments, but take them as arguments in 'initialize' method. This allowed creating derived class which takes only TexUsage as template argument (to be used in containers etc).
Mon 14.03.2016 - 2h - Creating new texture class - Renamed texture classes. Added new tests and improved existing tests.
Tue 15.03.2016 - 3h - Creating new texture class - started swapping old texture with the new one. Separated staging textures from normal textures.
Wed 23.03.2016 - 1h - Creating new texture class - found a way to implement the texture class - use constructor generation from base class (new feature in C++11).
Thu 24.03.2016 - 1h - Creating new texture class - Implemented new texture class with proper inheritance.
Fri 25.03.2016 - 3h - Installed Visual Studio 2015 and recompiled freetype library, Assimp library, FreeImage library.
--- March 2016 - 14h
Wed 27.04.2016 - 4h - Fixed test projects configurations - tests run again except for AssetManager tests (may be a VS bug). Installed VS Update 5. Fixed bugs in the new Texture2D class.
Thu 28.04.2016 - 3h - Refactoring whole code to use new texture class. Fixing compilation errors.
Fri 29.04.2016 - 3h - Refactoring whole code to use new texture class. Fixing compilation errors.
Sat 30.04.2016 - 6h - Refactoring whole code to use new texture class. Fixing compilation errors. Fixed RGB->BGR problem when loading textures. Cleaned up "to do" list. Reading on BVH trees.
--- April 2016 - 16h
Sun 01.05.2016 - 8h - Reading on BVH trees. Implemented BVH tree construction from block mesh.
Mon 02.05.2016 - 5h - Implemented BVH tree buffer (tree placed in contiguous memory). Refactored the raytracing shader - placed code in separate methods. Added BVH tree in BlockMesh and passed it to the raytracing shader.
Tue 03.05.2016 - 7h - Implemented BVH traversal in raytracing compute shader. Configured HLSL compiler to output generated assembly to file for examination. Examining why shader without optimizations is 2.5x faster than the one with optimizations. Added calculating intersection distance in raytracing shader.
Wed 04.05.2016 - 6h - Added calculation of barycentric coords in raytracing shader. Added an option to set multiple unordered access targets for a compute shader. Started using separate UAVs for hit distance and barycentric coords (to workaround 1-channel UAV read restriction). Added uint4 class. Added methods for clearing UAVs. Added raytracing multiple actors with correct front/back ordering. Refactored RendererCore methods related to binding render targets and UAV targets.
Thu 05.05.2016 - 3h - Camera can be manipulated when pressing right mouse button. Minor improvements in InputManager. Added passing normals and texcoords to ray tracing shader and writing interpolated texcoords and normals in the shader. 
Sat 07.05.2016 - 3h - Passed albedo texture to raytracing shader and outputted it's color.
Sun 08.05.2016 - 6h - Fixed calculating primary rays directions. Images generated through rasterization and raytracing are the same now. Change albedo deferred render target format from 4 floats to 4 uchars. Changed normal deferred render target format from 4 floats to 2 floats. Outputs from raytracer and deferred renderer have the same format now. Added uchar2 class. Added rendering of depth buffer. Added generating reflected rays from deferred renderer g-buffers. Added a shader for tracing secondary rays.
Mon 09.05.2016 - 1h - Fixed calculation of secondary rays orgins (added missing camera pos to the calculation).
Tue 10.05.2016 - 4h - Added ShadingRenderer, ShadingComputeShader.
Wed 11.05.2016 - 1h - Added simple shading with hardcoded light position.
Fri 13.05.2016 - 9h - Added CombiningRenderer, CombiningVertexShader, CombiningFragmentShader - used to combine main image with reflections. Outputted surface position in world space from DeferredRenderer - to be used when spawning reflected/refracted rays. Changed RaytraceRenderer to use surface position instead of depth value to generate secondary rays. Switched back to storing normals with 3 components - it's impossible to calculate thrid component from the first two (unknown sign). Fixed all problems with reflections.
Sat 14.05.2016 - 7h - Added outputting hit position from raytracing shaders. Added copying main image to final render target without running any shaders. Added shading on the reflected image. Downloaded a 3d car model from internet and added UVs, textures to it.
Sun 15.05.2016 - 6h - Read on Physical Based Rendering. Created sphere model for testing. Added new texture types to BlockModel and SkeletonModel: metalness and index of refraction. Created textures for testing PBR shading. Added new render targets and UAVs to store metalness, roughness, IOR in g-buffers. Added default textures in DeferredRenderer and RaytraceRenderer to be used when model misses some textures.
Mon 16.05.2016 - 4h - Modified ModelTexture2D, BlockModel, SkeletonModel, AssetManager etc to handle loading textures in both uchar4 and uchar1 pixel formats.
Tue 17.05.2016 - 2h - Continuing modifications to handle loading uchar4 and uchar textures. Added passing model textures or default textures to the raytracing and deferred shaders.
Wed 18.05.2016 - 5h - Finished modifications to support uchar4 and uchar textures. Passed normal, metalness, roughness, IOR textures to the raytracer. Added picking actors from the scene using mouse.
Thu 19.05.2016 - 5h - Added support for mipmap generation on GPU for textures. Used it to blur reflection image when combining it with the main image (ugly, aliased results, colors bleeding through object edges). Trying varius sampling schemes to improve blur quality, sampling mipmaps at different lods.
Sat 21.05.2016 - 7h - Thinking hard how to blur reflections efficently using gaussian blur, mipmaping, bilinear sampling and how to avoid color bleeding through eddges of objects in the reflection. Found a way to quickly blur any resolution mipmaps using 9-tap gaussian blur with only 4 samples (using bilinear filtering) to avoid visible aliasing - but aliasing is still visible when moving camera and colors still bleed thorugh object edges.
Mon 23.05.2016 - 3h - Added EdgeDetectionRenderer, EdgeDetectionComputeShader, EdgeDistanceComputeShader. Trying to render distance to the nearest edge for each pixel.
Wed 25.05.2016 - 2h - Trying to fix edge distance calculation.
Thu 26.05.2016 - 9h - Fixed edge distance calculation - had to use two textures instead of one to store intermediate results and avoid threads corrupting each other's work. Used edge distance to decide which mipmap level to sample near the edges. Played with sampling, calculating mipmap level etc.
Fri 27.05.2016 - 4h - Optimized edge distance calculation. Added TextureRescaleRenderer, TextureRescaleComputeShader to upscale reflection/refraction mipmaps. Added an option to get UAV/RenderTarget/DepthStencil view for each texture mipmap separately.