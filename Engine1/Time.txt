Fri 21.02.2014 - 7h - Starting project, math library, BlockMesh class, loading .obj files
Sat 22.02.2014 - 7h - Reading on Smart Pointers, loading .obj files - loading vertices, configuring project to add unit tests
Sun 23.02.2014 - 1h - Fighting with locked unittest.dll - test locked because of memory allocation error
Mon 24.02.2014 - 5h - Loading .obj files, parsing faces, checking for duplicated vertices
Thu 27.02.2014 - 4h - Loading .obj files, float comparing functions, mesh unit tests
Fri 28.02.2014 - 2h - Image library selection, FreeImage library download, setup, Texture class
--- February 2014 - 26h
Thu 06.03.2014 - 3h - Adding BlockModel class, adding getters to Texture2D, adding texture unit tests
Fri 07.03.2014 - 5h - Adding ComplexModel, BlockModelLOD, BlockMeshLOD classes, adding mip map support to Texture2D
Sun 16.03.2014 - 2h - Adding AssetManager, multithreaded assets loading, BasicAsset class
Wed 19.03.2014 - 2h - Transforming TextureFileFormat into AssetFileFormat to allow BlockMesh and Texture2D derive from BasicAsset
Thu 20.03.2014 - 4h - Fixing bugs in AssetManager, adding AssetManager unit tests
Fri 21.03.2014 - 1h - Looking for a bug in mesh loading
Thu 27.03.2014 - 2h - Looking for a bug in mesh loading, added TestAssets folder with assets used for tests 
Fri 28.03.2014 - 2h - Added float43 class, adding mesh test, profiling mesh loading, handling case when multiple assets with the same path are loaded in AssetManager
Sat 29.03.2014 - 1h - Added Application, InputManager, window setup
--- March 2014 - 22h
Wed 02.04.2014 - 5h - Added Direct3DRenderer, cleaned window creation, improved Windows message handling
Fri 04.04.2014 - 5h - Cleaning Direct3D initialization - splitting one big method into submethods, adding vertex and index buffers to BlockMesh
Sat 05.04.2014 - 1h - Added emission textures to BlockModel, added ModelTexture2D for storing texture together with its texcoordIndex and color multipliers
Sun 06.04.2014 - 3h - Writing VertexShader, FragmentShader class, pasing parameters, setting pipeline state, BlockMeshFragmentShader, BlockMeshVertexShader, shader inheritance, drawing first 3d model
Wed 09.04.2014 - 6h - Removing usage of D3DX lib, headers from the project (deprecated in Direct3D), adding float44 class, adding some D3DX funcionality (projections etc) to MathUtil, downloading and installing CUDA 6.0, new drivers, NSIGHT 4.0, trying to solve a problem with transformations after moving from D3DX lib to own code (problem: incorrect float44 transpose)
Fri 11.04.2014 - 1h - Fixing problem with passing buffers to shaders
Sat 12.04.2014 - 3h - Adding new shader - BlockModelShader - for drawing models with textures, loading textures to GPU
Tue 15.04.2014 - 1h - Fixing texture color problem - usage of bgr format instead of rgb
Wed 16.04.2014 - 1h - Trying to fix the problem with missing triangles in meshes loaded from .obj files, added support for meshes with only some faces having normals, texcoords
--- April 2014 - 26h
Fri 06.06.2014 - 1h - Fixing mesh loading from .obj files (crashes on end of file in some cases, missing triangles)
Sat 07.06.2014 - 2h - Trying to fix .obj mesh loading
Fri 20.06.2014 - 1h - Added Camera class
Sun 22.06.2014 - 2h - Created key mapping in InputManager, added Timer class for measuring time lapse
Fri 27.06.2014 - 2h - Added FreeCamera class, implemented camera navigation and view transformations, connected camera to mouse move and keyboard
Sat 28.06.2014 - 4h - Reading on Unicode issues, deciding on usage of UTF-8 internally everywhere, creating Rules.txt with text handling rules, created StringUtil to handle text conversions from UTF-8 to UTF-16 WinAPI. Looking for a Logger. Trying to use easylogger++.
--- June 2014 - 12h
Sun 07.09.2014 - 4h - Getting back to work, trying to run easylogging++ (failed - included header showed errors), fixed loading .obj bug (holes in geometry) (quad -> triangle incorrect conversion), fixed printing to the VS output window, trying to fix uppercasing/lowercasing utf8 strings
Wed 10.09.2014 - 3h - Drawing text using freetype lib
Thu 11.09.2014 - 1h - Drawing text using freetype lib
Fri 12.09.2014 - 5h - Drawing text using freetype lib
Sat 13.09.2014 - 8h - Drawing text using freetype lib, trying to fix an exception from graphics driver (Direct3D crashes), fixed "access violation" in graphics driver .dll - solved by installing a driver update, trying to clean up transformations, vertex ordering etc.
Sun 14.09.2014 - 6h - Fixing camera rotation by mouse movement (no more Windows callbacks on mouse move - checking cursor pos every frame), fixed row-major/column-major issues and transformation order in HLSL code and when passing matrices to shaders, fixed issues with culling (only backfacing triangles were visible) - inverting z-coordinate and texture v-coordinate (as explained in rules) was needed when loading model from file (model was in RH coordinate system -> rendering in LH)
Mon 15.09.2014 - 4h - Fixed drawing text (vertices were had to be in clockwise order, depth > 0, correct stride setting in buffer), added alpha blending to text display, fixed camera movement (also caused by delayed Windows key press messages processing - only one msg was processed per frame), reorganized Direct3DRenderer (shaders - compilation, passing params - are managed by the renderer)
Sun 21.09.2014 - 1h - Refactoring Direc3DRenderer
Mon 22.09.2014 - 2h - Improving asset inheritence (assets get all needed args on creation)
Wed 24.09.2014 - 2h - Reading about skeletal animation
Thu 25.09.2014 - 6h - Reading about skeletal animation, implementing RiggedMesh, SkeletonModel, SkeletonShader etc classes - storing and rendering simple skeletal mesh
Mod 29.09.2014 - 6h - Including Assimp libary into the code, loading .dae files into BlockMesh, fixing mesh loading tests after refactoring loading code
Tue 30.09.2014 - 2h - Fixing tests and linking in test project
--- September 2014 - 50h
Sun 05.10.2014 - 2h - Fixing bugs in BlockMesh, Texture2D (path wasn't lowercased), fixing StringUtil lowercaseing/uppercasing, adding message and throwing method name to all exceptions
Tue 07.10.2014 - 2h - Improving tests for Texture2D, BlockMesh, writing MathUtil tests, enabling multithreaded build in VS
Sun 13.10.2014 - 2h - Loading .dae files into RiggedMesh - loading bones and weights
Wed 22.10.2014 - 1h - Passing bones' bindPose and pose to SkeletonVertexShader, passing mesh's vertex bones and weights
Fri 31.10.2014 - 3h - Creating bones/weight buffers on GPU, creating input layout for VS, added Direct3DUtil - allows to assign names to D3D resources for easier debug, trying to figure out why skeleton data is not available in the shader 
--- October 2014 - 10h
Thu 06.11.2014 - 2h - Fixing vertex/bone transformations in skeleton vs, added new method to float44 for inverting a transformation matrix (scale + rotation + translation), passed inverted bindPose to skeleton vs
Sat 08.11.2014 - 4h - Writing tests for float44::getScaleRotationTranslationInverse(), added default parameter values for MathUtill::areEqual, created tests playlists with fast and slow tests, fixed float44::getScaleRotationTranslationInverse()
Mon 10.11.2014 - 3h - Created XAFFileParser, SkeletonPose, SkeletonAnimation classes, included xml parser in the project, writing .xaf file parser for loading animations from 3Ds Max  
Fri 14.11.2014 - 1h - Writing XAFFileParser - parsing matrix from text, iterating through the nodes
Sat 15.11.2014 - 3h - Added reading of bones names in DAEFileParser, added finding bone by name in XAFFileParser, modified mesh/anim files to contain no spaces in bone names, added check for duplicated bone names in DAEFileParser
Sun 16.11.2014 - 5h - Tried to fix exporting skeleton meshes to .dea in 3ds Max - seemed like not all the bones where exported. Installed OpenCollada exporter, but it made no difference. Reason seems to be in Assimp importer, which reads bones from joints only - last bones in chain are not loaded (their bind poses). Added bones ordering in per vertex data, so they were ordered by descending weight. Renamed SkeletonMesh to RiggedMesh. Added SkeletonBonePose class.
Thu 20.11.2014 - 4h - Modified SkeletonPose from a simple vector of poses to a proper class with methods to access bones. Implemented a feature - SkeletonPose recalculates bones pose in skeleton space when needed (user doesn't have to worry about that). Added SkeletonPose::combinePoses() method to combine two poses into one. (propbably not working correctly).
Sat 22.11.2014 - 4h - Added Bone inner class to SkeletonMesh - SkeletonMesh now stores all the information about skeleton structure.
Sun 23.11.2014 - 5h - Integrating recent code changes, modified .dea parser to create skeleton structure in SkeletonMesh, modified .xaf parser to use SkeletonMesh as a source of information about skeleton structure. Modified SkeletonMeshVertexShader to use SkeletonMesh and SkeletonPose as a source of bone poses. Trying to debug incorrect skeletal transformations. Creating simple two-bone/two-boxes skeleton model for tests.
Tue 25.11.2014 - 4h - Found reason of incorrect skeleton rendering - final bone pose should be in it's own bind space, not in skeleton space (means that we are interested how far it moved from it's bind pose, not how far it moved from the skeleton origin). To fix this problem we need to multiply bone's pose in skeleton space by it's bind pose (or calculate it differently). Trying to fix the problem with soem vertices in the skeleton being exploded in some direction. Seems like some vertices aren't attached to any bones despite vertex-bone data presence in the buffer. Installed newest driver.
--- November 2014 - 35h
Sat 20.12.2014 - 1h - Found a workaround to incorrect skeleton rendering - setting vertex-bones buffer offset during rendering to -1.
Sun 21.12.2014 - 2h - Fixed skeleton rendering - reason: shader input layout for bones and weights had AlignedByteOffset property set to some value instead of 0. Info about stride is set during drawing, not in the input layout. 
Thu 25.12.2014 - 7h - Rewriting SkeletonPose to be independent from the space in which bones' poses are defined (to avoid confusion and complex code). 
Sat 27.12.2014 - 5h - Finishing changes to SkeletonPose and XAFFileParser. Fixing constness of some methods and return values in BlockMesh and BlockModel.
Sun 28.12.2014 - 3,5h - Fixing constness of some methods and return values in SkeletonMesh, SkeletonModel. Fixing transformations in SkeletonPose::calculatePoseInParentSpace.
--- December 2014 - 18h

--- 2014 - 199h

Sat 21.03.2015 - 2h - Added transformation of normals in skeleton mesh shader. Added new test model for skeleton mesh.
--- March 2015 - 2h
Sun 19.04.2015 - 2h - Refactoring. Removing loading assets methods from asset classes.
--- April 2015 - 2h
Fri 01.05.2015 - 4h - Installed VisualAssist and Cppcheck. Refactoring Texture2D class.
Sat 02.05.2015 - 1h - Refactoring Texture2D class.
Sat 09.05.2015 - 8h - Added RenderTargeTexture2D and RenderTargetDepthTexture2D. Refactored tests for Texture2D.
Sun 10.05.2015 - 3h - Refactoring Texture2D tests, planning on refactoring of Direct3DRenderer into 3 renderers. 
Mon 11.05.2015 - 2h - Added Direct3DRendererCore.
Wed 13.05.2015 - 2h - Added Direct3DDeferredRenderer.
Thu	14.05.2015 - 2h - Refactoring Direct3DFrameRenderer.
Sat 16.05.2015 - 5h - Added RectangleMesh, RenderTarget2D, RenderTargetDepth2D. Refactoring Direct3DFrameRenderer.
Sun 17.05.2015 - 3h - Added TextureVertexShader, TextureFragmentShader.
Mon 18.05.2015 - 2h - Modified shaders to output to multiple render targets, fixed some bugs and started deferred renderer.
Tue 19.05.2015 - 1h - Rendering DeferredRenderer output through FrameRenderer.
Wed 20.05.2015 - 5h - Fixed deferred rendering (pixels not showing on screen) by disabling depth test in depth stencil state. Debugging with Nsight and VS built in graphics debugger.
Mon 25.05.2015 - 2h - Trying to fix problem with deferred rendered meshes failing depth test.
--- May 2015 - 40h
Sat 13.06.2015 - 1h - Fixed depth culling problem. Reason: incorrect combination of depth texture format, depth stencil view format and shader resource format.
Fri 20.06.2015 - 2h - Prototyped space partitioning hierarchy. Modified BlockModel shaders and SkeletonMesh shaders to work with Deferred Rendering.
Sat 21.06.2015 - 4h - Refactored BlockMesh - loading from file in a static method. Refactored BlockMeshTests accordingly. Added tests for loading mesh from CPU to GPU.
Sun 22.06.2015 - 4h - Added initializing/deinitializing FreeImage libarary statically in a new ImageLibrary class. Same for FreeType library. Fixing and refactoring text rendering to be in DeferredRenderer and use RendererCore. Debugging blend state problems.
Wed 24.06.2015 - 1h - Fixed text rendering pixel shader.
Thu 25.06.2015 - 2h - Fixed text background no-transparency problem. (Alpha writes were unnecessarily enabled in DeferredRenderer and there was unnecessary alpha blending enabled in FrameRenderer - pixels with alpha were not rendered to final frame).
Fri 26.06.2015 - 1h - Added deviceContext member to RendererCore and removed it from methods' arguments.
Sat 27.06.2015 - 5h - Refactored SkeletonMesh - loading from file in a static method. Switching to use Microsoft::WRL::ComPtr for storing Direct3D pointers in all classes - to avoid not freeing resources.
--- June 2015 - 20h
Thu 02.07.2015 - 2h - Fixed problem of leaking Direct3D resources.
Wed 08.07.2015 - 1h - Trying to debug incorrect SkeletonMesh rendering with Graphics Debugger.
Thu 09.07.2015 - 2h - Trying to debug incorrect SkeletonMesh rendering with Graphics Debugger.
Fri 10.07.2015 - 2h - Trying to debug incorrect SkeletonMesh rendering with Graphics Debugger. Fixed problem with incorrect blend weights in shader input. Reason: Some buffers were set multiple times at different slots. Instead, each buffer should be set once, but referenced multiple times in input layout (as input slot). Enabled debug and disabled optimizations in shader compilation (only for debug configurations) - to enable shader debugging in Graphics Debugger.
Sat 11.07.2015 - 7h - Fixed problem with SkeletonMesh rendering. Error was caused by misspelling in the shader. Removing old "to-do" notes. Added locking cursor position only when the window has focus. Modified skeleton mesh vertex shader to run in loop - for readibility and ease of increasing 'max bones per vertex' count - (needed to use 'unroll' modifier to make it compile).
Sun 12.07.2015 - 4h - Optimizing SkeletonMesh vertex shader and class to pass boneIndices and weights to shader using fewer vertex attributes and to allow meshes to store only as many weights/indices as they need, without having extra zeros to match vertex attributes. Reading on enums and re-organizing them.
Mon 13.07.2015 - 1h - Finished modifications in SkeletonMesh vertex shader.
Thu 16.07.2015 - 3h - Bought Visual Assist. Added bonesPerVertex param in SkeletonMesh vertex shader. Refactored SkeletonAnimation to read files statically. Fixed problem with File class reading files having garbage at the end.
Sat 18.07.2015 - 8h - Preparing skeleton poses for test in 3ds Max. Working on blending/combining skeleton poses. Reading on quaternions in "Math Primer" book. Implementing quaternion class.
Sun 19.07.2015 - 2h - Matrix <-> quaternion conversions. Matrix slerp. Blending SkeletonMesh poses.
Mon 20.07.2015 - 4h - Major refactoring of XAF file parser. Parsing multiple poses from different animation frames and saving them in SkeletonAnimation.
Tue 21.07.2015 - 1h - Refactoring of XAF file parser.
Wed 22.07.2015 - 4h - Refactoring of XAF file parser. Converting SkeletonAnimation between skeleton/parent space. Creating test animation in 3ds Max. Blending poses between keyframes.
Thu 23.07.2015 - 2h - Trying to fix issues with incorrect blending of poses in parent space (dealing with 'last in the chain' bones).
Fri 24.07.2015 - 3h - Refactoring of blending and skeleton <-> parent space transformations for SkeletonMesh. Loading multiple meshes from a single .obj/.dae file. Trying to load a complex skeleton mesh.
--- July 2015 - 46h
Sun 13.09.2015 - 3h - Fixed problem with very thin skeleton mesh - caused by an animation file with some bones missing which contained scaling. Added lerp operation on float33. Debugging incorrect interpolation between skeleton poses. 
Thu 24.09.2015 - 2h - Debugging problem with malformed animated meshes. Problem is related to matrix slerp. Added some tests for quaternion slerp.
--- September 2015 - 5h
Wed 28.10.2015 - 4h - Fixed incorrect quaternion -> matrix conversion. A symbol in the formula was incorrect - caused by a mistake in the book :).
Thu 29.10.2015 - 4h - Setting up Git and publishing the project to GitHub. Desiging scene space partitioning and scene storage, saving to file etc.
Fri 30.10.2015 - 5h - Saving BlockModel, Texture2D, ModelTexture2D to file. 
Sat 31.10.2015 - 5h - Saving BlockModel, Texture2D, ModelTexture2D to file. 
--- October 2015 - 18h
Sun 01.11.2015 - 3h - Loading BlockModel, Texture2D, ModelTexture2D from file. 
Mon 02.11.2015 - 2h - Loading BlockModel, Texture2D, ModelTexture2D from file. 
Fri 06.11.2015 - 3h - Loading BlockModel, Texture2D, ModelTexture2D from file.
Sat 07.11.2015 - 4h - Fixed problem with texcoords not loading with Assimp. Added rendering of textured skeleton models.
Sun 08.11.2015 - 4h - Separating asset classes from their file information. Added BlockMeshFileInfo class.
Mon 09.11.2015 - 2h - Separating asset classes from their file information. Added SkeletonMeshFileInfo, Texture2DFileInfo classes. Fixing AssetManager.
Tue 10.11.2015 - 1h - Fixing AssetManager.
Wed 11.11.2015 - 5h - Fixed AssetManager. Unified TextFile and BinaryFile vector inner type. Fixed AssetManager tests. Added support to AssetManager for assets from the same path, but with different index in file.
Thu 12.11.2015 - 3h - Added AssetManager::getWhenLoaded() method. Added 'performance' test in AssetManager.
Fri 13.11.2015 - 1h - Adding support for loading assets with sub-assets in AssetManager.
Mon 16.11.2015 - 3h - Added support for loading assets with sub-assets in AssetManager.
Sat 28.11.2015 - 9h - Loading/creating/combining new assets through drag&drop. Made SkeletonAnimation an asset. Fixed timeout values in some tests. Added tests for loading the animations. Added BlockActor and SkeletonActor classes.
Sun 29.11.2015 - 5h - Added Scene class. Added option to drag&drop assets to the scene. Using AssetManager in Application. Adding support for loading different types of assets (ex. BlockMesh and SkeletonMesh) from the same path in AssetManager.
Mon 30.11.2015 - 1h - Putting all the classes in namespace Engine1.
--- November 2015 - 46h
Tue 01.12.2015 - 2h - Updated tests after changes to AssetManager. Fixing project configuration for x64. Downloaded new FreeImage library for x32 and x64.
Wed 02.12.2015 - 3h - Fixed project config for x64 and Freetype library for x64. Fixed problem with loading a model through AssetManager which has sub-assets which were already loaded before.
Fri 04.12.2015 - 2h - Fixed some AssetManager tests. Adding saving Scene to a file.
Sat 05.12.2015 - 6h - Adding saving/loading scene to/from a file. Added BlockModelFileInfoParser and SkeletonModelFileInfoParser. Added a param to loadCpuToGpu methods to allow loading only the assets which haven't been loaded yet.
Sun 06.12.2015 - 2h - Fixed problem with missing file info for assets loaded asynchronously through AssetManager.
Tue 08.12.2015 - 5h - Added Light, PointLight classes. Prepared light bulb mesh to display lights in the scene. Added loading/saving lights with the scene.
Wed 09.12.2015 - 1h - Unified all parsers to use iterators as params. Removed 'file type identifier' checks from parsers.
Thu 10.12.2015 - 6h - Fixed problem with UnitTests project having different current path than Engine1 project. Added loading a scene on drag&drop, saving on Ctrl + S. Separated main rendering code into Renderer class.
Sun 27.12.2015 - 4h - Added RaytraceRenderer, ComputeShader classes. Fixed remembering of currently bound shader in RendererCore class. Compiled some trivial compute shader. Read code samples for writing to texture from compute shader.
Mod 28.12.2015 - 3h - Added ComputeTargeTexture2D class. Fixed remembering of currently bound render targets. Added unbinding shaders, render targets, buffers etc.
Tue 29.12.2015 - 3h - Successfully run a compute shader. Some testing and learning on compute shader thread ids. Added a method to generate primary rays in compute shader.
Wed 30.12.2015 - 4h - Passed camera state to the compute shader and generated the primary rays. Added an ability to switch views on keyboard button (albedo, normal, reflection etc). Started creating raytracing shader.
Thu 31.12.2015 - 6h - Managed to read texture in CS and write to uav in one shader. Raytraced first bounding box in CS. Discovering ways to pass vertex buffer to the compute shader (as vertex buffer can't be used as a shader reasource).
--- December 2015 - 47h

--- 2015 - 226h

Fri 01.01.2016 - 2h - Passed vertex and triangle data to the compute shader. Trying to raytrace the triangle mesh.
Sat 02.01.2016 - 6h - Successfully raytraced triangle mesh.
Sun 03.01.2016 - 3h - Fixed various project setup issues. Added x64 platform for UnitTests project. Enabled compilation of shaders in the build. Added bounding box to meshes.
Mon 04.01.2016 - 3h - Fixed raytracing slightly incorrect primary rays directions (FOV related). Added an option to rotate actors in the scene. Removed Assimp source code from the project and linked to it's libary. Removed all causes of warnings from the code.
Tue 05.01.2016 - 5h - Compiled Assimp and replaced wrong Assimp dlls and libs. Fixed non-working texture swapping in BlockModel/SkeletonModel. Fixed some bugs related to the refactored code.
Fri 29.01.2016 - 4h - Thinking how to refactor texture, render target, compute target classes into something more general and configurable + add new functionality.
--- January 2016 - 23h
Sat 06.02.2016 - 3h - Creating new texture class which supports multiple usages, bindings, types and formats.
Sun 07.02.2016 - 3h - Creating new texture class.
Thu 11.02.2016 - 3h - Creating new texture class - loading from file.
Fri 12.02.2016 - 3h - Creating new texture class - static methods, splitting into files, separating declarations from definitions.
Sat 13.02.2016 - 5h - Creating new texture class - tidying up, fixing, some basic testing.
Sat 20.02.2016 - 7h - Creating new texture class - loading to/from CPU/GPU, adding missing interface. Creating first tests. Modyfing class to take 'format' param in constructor rather than as a template param. Trying to create many version of constructors without code duplication with std::enable_if.
Sun 21.02.2016 - 3h - Creating new texture class - creating various version of constructors which take 1, 2 or 3 format arguments.
Mon 22.02.2016 - 4h - Creating new texture class - writing tests, polishing, removing unsupported binding configurations.
Sat 27.02.2016 - 2h - Creating new texture class - writing tests. Adding static assert to check if given texture configuration is supported.
Mon 29.02.2016 - 2h - Creating new texture class - writing tests.
--- February 2016 - 35h
Tue 01.03.2016 - 2h - Creating new texture class - trying to write a cast operator from texture with specific binding to a texture with no bindings.
Sun 13.03.2016 - 2h - Creating new texture class - Modified Texture2DInternal class to not use TexUsage and TexBind as template arguments, but take them as arguments in 'initialize' method. This allowed creating derived class which takes only TexUsage as template argument (to be used in containers etc).
Mon 14.03.2016 - 2h - Creating new texture class - Renamed texture classes. Added new tests and improved existing tests.
Tue 15.03.2016 - 3h - Creating new texture class - started swapping old texture with the new one. Separated staging textures from normal textures.
Wed 23.03.2016 - 1h - Creating new texture class - found a way to implement the texture class - use constructor generation from base class (new feature in C++11).
Thu 24.03.2016 - 1h - Creating new texture class - Implemented new texture class with proper inheritance.
Fri 25.03.2016 - 3h - Installed Visual Studio 2015 and recompiled freetype library, Assimp library, FreeImage library.
--- March 2016 - 14h
Wed 27.04.2016 - 4h - Fixed test projects configurations - tests run again except for AssetManager tests (may be a VS bug). Installed VS Update 5. Fixed bugs in the new Texture2D class.
Thu 28.04.2016 - 3h - Refactoring whole code to use new texture class. Fixing compilation errors.
Fri 29.04.2016 - 3h - Refactoring whole code to use new texture class. Fixing compilation errors.
Sat 30.04.2016 - 6h - Refactoring whole code to use new texture class. Fixing compilation errors. Fixed RGB->BGR problem when loading textures. Cleaned up "to do" list. Reading on BVH trees.
--- April 2016 - 16h
Sun 01.05.2016 - 8h - Reading on BVH trees. Implemented BVH tree construction from block mesh.
Mon 02.05.2016 - 5h - Implemented BVH tree buffer (tree placed in contiguous memory). Refactored the raytracing shader - placed code in separate methods. Added BVH tree in BlockMesh and passed it to the raytracing shader.
Tue 03.05.2016 - 7h - Implemented BVH traversal in raytracing compute shader. Configured HLSL compiler to output generated assembly to file for examination. Examining why shader without optimizations is 2.5x faster than the one with optimizations. Added calculating intersection distance in raytracing shader.
Wed 04.05.2016 - 6h - Added calculation of barycentric coords in raytracing shader. Added an option to set multiple unordered access targets for a compute shader. Started using separate UAVs for hit distance and barycentric coords (to workaround 1-channel UAV read restriction). Added uint4 class. Added methods for clearing UAVs. Added raytracing multiple actors with correct front/back ordering. Refactored RendererCore methods related to binding render targets and UAV targets.
Thu 05.05.2016 - 3h - Camera can be manipulated when pressing right mouse button. Minor improvements in InputManager. Added passing normals and texcoords to ray tracing shader and writing interpolated texcoords and normals in the shader. 
Sat 07.05.2016 - 3h - Passed albedo texture to raytracing shader and outputted it's color.
Sun 08.05.2016 - 6h - Fixed calculating primary rays directions. Images generated through rasterization and raytracing are the same now. Change albedo deferred render target format from 4 floats to 4 uchars. Changed normal deferred render target format from 4 floats to 2 floats. Outputs from raytracer and deferred renderer have the same format now. Added uchar2 class. Added rendering of depth buffer. Added generating reflected rays from deferred renderer g-buffers. Added a shader for tracing secondary rays.
Mon 09.05.2016 - 1h - Fixed calculation of secondary rays orgins (added missing camera pos to the calculation).
Tue 10.05.2016 - 4h - Added ShadingRenderer, ShadingComputeShader.
Wed 11.05.2016 - 1h - Added simple shading with hardcoded light position.
Fri 13.05.2016 - 9h - Added CombiningRenderer, CombiningVertexShader, CombiningFragmentShader - used to combine main image with reflections. Outputted surface position in world space from DeferredRenderer - to be used when spawning reflected/refracted rays. Changed RaytraceRenderer to use surface position instead of depth value to generate secondary rays. Switched back to storing normals with 3 components - it's impossible to calculate thrid component from the first two (unknown sign). Fixed all problems with reflections.
Sat 14.05.2016 - 7h - Added outputting hit position from raytracing shaders. Added copying main image to final render target without running any shaders. Added shading on the reflected image. Downloaded a 3d car model from internet and added UVs, textures to it.
Sun 15.05.2016 - 6h - Read on Physical Based Rendering. Created sphere model for testing. Added new texture types to BlockModel and SkeletonModel: metalness and index of refraction. Created textures for testing PBR shading. Added new render targets and UAVs to store metalness, roughness, IOR in g-buffers. Added default textures in DeferredRenderer and RaytraceRenderer to be used when model misses some textures.
Mon 16.05.2016 - 4h - Modified ModelTexture2D, BlockModel, SkeletonModel, AssetManager etc to handle loading textures in both uchar4 and uchar1 pixel formats.
Tue 17.05.2016 - 2h - Continuing modifications to handle loading uchar4 and uchar textures. Added passing model textures or default textures to the raytracing and deferred shaders.
Wed 18.05.2016 - 5h - Finished modifications to support uchar4 and uchar textures. Passed normal, metalness, roughness, IOR textures to the raytracer. Added picking actors from the scene using mouse.
Thu 19.05.2016 - 5h - Added support for mipmap generation on GPU for textures. Used it to blur reflection image when combining it with the main image (ugly, aliased results, colors bleeding through object edges). Trying varius sampling schemes to improve blur quality, sampling mipmaps at different lods.
Sat 21.05.2016 - 7h - Thinking hard how to blur reflections efficently using gaussian blur, mipmaping, bilinear sampling and how to avoid color bleeding through eddges of objects in the reflection. Found a way to quickly blur any resolution mipmaps using 9-tap gaussian blur with only 4 samples (using bilinear filtering) to avoid visible aliasing - but aliasing is still visible when moving camera and colors still bleed thorugh object edges.
Mon 23.05.2016 - 3h - Added EdgeDetectionRenderer, EdgeDetectionComputeShader, EdgeDistanceComputeShader. Trying to render distance to the nearest edge for each pixel.
Wed 25.05.2016 - 2h - Trying to fix edge distance calculation.
Thu 26.05.2016 - 9h - Fixed edge distance calculation - had to use two textures instead of one to store intermediate results and avoid threads corrupting each other's work. Used edge distance to decide which mipmap level to sample near the edges. Played with sampling, calculating mipmap level etc.
Fri 27.05.2016 - 6h - Optimized edge distance calculation. Added TextureRescaleRenderer, TextureRescaleComputeShader to upscale reflection/refraction mipmaps. Added an option to get UAV/RenderTarget/DepthStencil/ShaderResource view for each texture mipmap separately. Trying to upscale one mipmap and render it into another mipmap of the same texture.
--- May 2016 - 109h
Sat 11.06.2016 - 3h - Trying to blur reflections near the edges of object using multisampling. Failed on several approaches. Found a new way to detect edges using normal/position buffer mipmaps.
Sun 12.06.2016 - 4h - Modified combining shader to use normal/position g-buffer mipmaps to detect edges when sampling reflection image.
Tue 14.06.2016 - 3h - Experimented with the combining shader to blur reflections nicely.
Wed 15.06.2016 - 2h - Accounted for distance to object when selecting which reflection mipmap to sample. The farther the camera the higher-resolution mipmap has to be sampled.
Fri 17.06.2016 - 3h - Added normal mapping to block model shaders. But generation of tangent and bitangent has to be done on CPU instead of GPU.
Sat 18.06.2016 - 7h - Removed my own .obj file parser. Used Assmip instead. Added tangent storage to BlockMesh and SkeletonMesh. Tangents are calculated during mesh parsing by Assimp. Fixed loading skeleton models using drag&drop. Added an option to drag&drop an animation on the app window to apply it to a selected skeleton model. Added selecting skeleton models by mouse click. Added normal mapping to skeleton model shaders.
Sun 19.06.2016 - 6h - Fixed problem with incorrect normals in raytraced image - caused by missing transformation of normals from local to world space. Trying to solve the problem of blurring the reflections depending on the ray distance, when ray distance can change rapidly near the edges of objects seen in reflection. Fixed reflection blurring when getting really close to the reflective surface (below 1m).
Mon 20.06.2016 - 6h - Experimenting with contact hardening reflections and varying blur depending on how far the camera is from reflective surface.
Tue 21.06.2016 - 4h - Trying to find a way to blur reflection smoothly when ray distance changes rapidly (like an edge between an object and the sky) for very rough surfaces.
Wed 22.06.2016 - 2h - Adam is creating 3d scene for me. Trying to import that to the engine.
Thu 23.06.2016 - 3h - Added emissive to raytracing and to deferred renderer. Creating skybox models.
Fri 24.06.2016 - 4h - Created skybox meshes and models. Disabled generating secondary rays for surfaces with maximal roughness (to disable reflections on skybox). Debugged and fixed deadlock when loading many assets using AssetManager (parsing threads were all waiting for sub-assets to be parsed while no one was parsing). Fixed by parsing basic assets first (the ones without sub-assets).
Sat 25.06.2016 - 2h - Added selecting and moving/deleting light sources. Passed light sources to the shading shader using constant buffer.
Sun 26.06.2016 - 2h - Added an option to clone actors in the scene and to replace textures on specific actors using drag&drop.
Mod 27.06.2016 - 3h - Fixed cloning actors. Used roughness from texture to calculate reflection blur. Adding fresnel term to reflection in the combining shader.
--- June 2016 - 54h
Wed 06.07.2016 - 1h - Fixed fresnel.
Sat 09.07.2016 - 5h - Added specular highlight shading based on an Unreal 4 paper. Failed to use the same shading when combining reflection image with the main image. Set specular color to fixed value for dielectrics.
Mon 11.07.2016 - 3h - Fixing shading. Added missing N dot L multiplication for specular term which caused sharp cut in shading. Improved shading of reflections for metals and dielectrics.
Wed 13.07.2016 - 2h - Added generating and tracing second level of reflected rays.
Fri 15.07.2016 - 3h - Fixed generating second level of reflected rays and shading for them.
Sun 17.07.2016 - 3h - Trying to create reflection shading renderer and shader. To calculate and accumulate reflection term to be used when combining reflection images together. 
Mon 18.07.2016 - 1h - Passed reflection term to the combining shaders.
Tue 19.07.2016 - 1h - Created a loop to allow for any number of reflection levels.
Wed 20.07.2016 - 2h - Adding refracted rays generation. Optimized secondary rays generation to avoid generating rays which color has really small contribution to the final image (because if low reflection term after a few bounces).
Thu 21.07.2016 - 2h - Fixed self-collision problem for refracted rays by ignoring really close intersections in raytracing shader.
Sat 23.07.2016 - 1h - Added accumulating roughness (simplified) when tracing multiple reflections/refractions.
Tue 26.07.2016 - 2h - Added recurrent generation/tracing of reflections and refractions.
Thu 28.07.2016 - 2h - Added support for alpha textures and used alpha to decide how much transmission occurs. Fixing incorrect reflection/refraction shading for secondary rays (ray origins should be used rather than camera pos).
Fri 29.07.2016 - 1h - Trying to fix reflection/refraction shading.
Sat 30.07.2016 - 1h - Trying to fix a bug with third and higher level of refraction being black.
Sun 31.07.2016 - 1h - Trying to fix a bug with third and higher level of refraction being black.
--- July 2016 - 31h
Wed 03.08.2016 - 2h - Adding debug display of render buffers at any level and combination of reflection/refraction.
Sun 07.08.2016 - 3h - Fixed problem with refraction being black. Caused by overriding contribution term from lower levels by higher level reflections/refractions. Fixed by using a set of buffers per each level (wasteful!).
Mon 08.08.2016 - 1h - Trying to fix refraction being too bright and being black for backfacing surfaces.
Tue 09.08.2016 - 1h - Added debug rendering of texture alpha.
Wed 10.08.2016 - 2h - Fixed problem with incorrect refraction - caused by inverting normal for front facing rays, instead of for back facing rays. Removed unnecessary inputs from combining shader.
Thu 11.08.2016 - 2h - Started using accumulated roughness in combining shader (the one calculated during reflection/refraction shading). Fixed problem with overbright objects after refractions - fixed by using alpha to decrease shaded color. Fixed incorrect default alpha in raytracer.
Sat 13.08.2016 - 4h - Switching to VS 2015, Windows SDK 10 - to fix directx debug layer and graphics debugger. Recompiled freetype library. Found a bug in texture class regarding creating/not creating mipmaps. Refactoring member variables to use m_ prefix.
Sun 14.08.2016 - 4h - Added an option to Texture class to create/not create mipmaps when creating texture with no initial data (previously mipmaps were always created). Prefixed all member variables with "m_".
Mon 15.08.2016 - 4h - Added normal mapping to raytracing. Fixed normal mapping in deferred renderer. Optimized raytracing shader for cases where single rays intersects many triangles. Thinking how to implement storage of current/previous refraction indices when light transmits through several objects.
Fri 19.08.2016 - 3h - Implementing storage of current refractive index.
Sat 20.08.2016 - 4h - Implementing new refractive index storage and modyfing refracted ray generation shaders. 
Sun 21.08.2016 - 5h - Fixed a bug with wrong default normal texture in raytrace renderer. Implementing new refractive index storage and modyfing refracted ray generation shaders. 
Sat 27.08.2016 - 1h - Added staging texture class.
Mon 29.08.2016 - 1h - Added debug display of screen pixel color at the cursor position.
Wed 31.08.2016 - 5h - Added debug display of texture pixel color of various types (float, float4, uchar4 etc) and debug display of refraction index of the whole set of textures. Fixed incorrect refractive index values when generating refracted rays. Added support for variable resolution.
--- August 2016 - 42h
Thu 01.08.2016 - 2h - Adding support for variable resolution depanding on reflection/refraction level.
Tue 06.08.2016 - 3h - Reorganizing libraries - moving libraries and includes inside the project folder. Removing DirectX SDK - using Windows SDK instead.
Wed 07.08.2016 - 2h - Fixed pojects setup.
Thu 08.08.2016 - 6h - Adding raytraced shadows.
Fri 09.08.2016 - 6h - Adding raytraced shadows. Test with soft shadows. Using illumination texture in shading. Adding support for multiple lights with shadows. 
Sat 10.09.2016 - 2h - Generating shadows at lower resolution and sampling them smoothly in shading.
Mon 12.09.2016 - 3h - Added shadows in reflections/refractions.
Tue 13.09.2016 - 3h - Playing with sampling raytraced shadows to improve antialiasing. Optimized raytraced shadows to not trace rays for surfaces which are backfacing a light source.
Wed 14.09.2016 - 3h - Added ShadowMapRenderer.
Thu 15.09.2016 - 2h - Adding support for multiple lights/objects casting shadows + re-enabling emissive term.
Mon 19.09.2016 - 1h - Fixed emmisive term in reflections/refractions. Added enabling/disabling casting shadows per actor. Optimized raytraced shadows shader to not trace rays for completaly shadowed areas.
Tue 20.09.2016 - 2h - Loading/saving camera state to file.
Wed 21.09.2016 - 1h - Fixed saving/loading camera.
Thu 22.09.2016 - 4h - Added partial shadowing for objects with alpha texture. Added reordering of mesh triangles to match BVH tree nodes - optimized raytracing and removed the need for a mapping array between BVH node's triangles and mesh triangles.
Fri 23.09.2016 - 2h - Optimizing shadow raytracing shader to test intersection against a few meshes at single run - failed because of lack of hardware support for selecting a buffer from a buffer array based on a variable.
Sun 25.09.2016 - 2h - Added an option to blend frames drawn in FrameRenderer - to allow for text rendering after the scene is rendered.
Mon 26.09.2016 - 4h - Added Profiler class to measure GPU performance.
Tue 27.09.2016 - 2h - Modifying Profiler to support "per stage" and "per stage, per light" events aside from global events.
Wed 28.09.2016 - 4h - Finished modifying and fixing Profiler. Added some events to profiling.
Fri 30.09.2016 - 1h - Improved display of profiling info - it's not refreshed every frame for better readibility.
--- September 2016 - 55h
Sun 02.10.2016 - 1h - Added support for Drag&Drop loading multiple meshes from a single file.
Mon 03.10.2016 - 4h - Added support for selecting multiple actors and lights at the same time. Added marking selected actors and lights using additional emissive color.
Tue 04.10.2016 - 5h - Added TextureUtil class. Adding support for merging a couple of textures together into a single texture.
Wed 05.10.2016 - 2h - Merging textures, saving result to a file.
Thu 06.10.2016 - 2h - Merging textures, saving result to a file, testing.
Fri 07.10.2016 - 2h - Added saving texture to file in Texture2DGeneric class. Added MeshUtil class. Added merging meshes.
Sat 08.10.2016 - 3h - Saving BlockMesh to file using Assimp.
Sun 09.10.2016 - 2h - Saving BlockMesh to file using Assimp. Added ModelUtil class. Merging block models.
Mon 10.10.2016 - 6h - Merging block models.
Tue 11.10.2016 - 2h - Merging selected models and saving them to file along with the mesh and textures.
Wed 12.10.2016 - 2h - Adding new profiling events and improving display of profiling info.
Fri 14.10.2016 - 3h - Fixed window size to account for frame and borders. Trying ot fix blurry text display, line gaps etc.
Sat 15.10.2016 - 5h - Saving/loading meshes and BVH tree to own binary format.
Sun 16.10.2016 - 2h - Saving/loading meshes and BVH tree to own binary format.
Mon 17.10.2016 - 6h - Improved picking actors by raytracing against their triangle meshes instead of bounding boxes. Assigned textures to most models in the Kitchen Scene. Fixed problem with bright outlines on objects - related to optimization in shadows calculation (details in the commit).
Tue 18.10.2016 - 1h - Added ability to enable/disable light sources.
Wed 19.10.2016 - 4h - Adding ability to enable/disable casting shadows for light sources. Added new shading shaders (without shadows).
Sat 22.10.2016 - 4h - Refactoring BlockModel and SkeletonModel to use TextureType template param for getters and setters of textures.
Sat 29.10.2016 - 4h - Refactoring ModelUtil::mergeModels method. Setting lights and textures in the kitchen scene.
--- October 2016 - 60h
Tue 01.11.2016 - 6h - Trying to fix merging models and textures to work for some special scenarios (repeated textures of one type, unique textures of another type).
Wed 02.11.2016 - 3h - Fixing merging models and textures.
Thu 03.11.2016 - 1h - Fixing merging models and textures.
Fri 04.11.2016 - 4h - Fixed handling failures in AssetManager. AssetManager::getWhenLoaded method correctly checks for errors now and is woken up on errors. Fixed AssetManager deadlock when loading very many assets at once - caused by many complex assets starting loading at the same moment and thus occupying all threads (leaving no threads for loading basic sub-assets). Fixed by having two groups of threads for basic and complex assets. Also added an option to load an asset with highest priority. Fixing corrupted normals in the Bathroom scene, otpimizing meshes. Display of vertex and triangle count for selected actors and the scene.
Sat 05.11.2016 - 6h - Added SceneManager class. Moved scene management code from Application class to SceneManager class. Added wireframe rendering mode. Added slowmotion mode for moving camera and moving actors.
Sun 06.11.2016 - 7h - Added selecting by volume and rendering of selection volume.
Mon 07.11.2016 - 3h - Trying to simplify some meshes in Bathroom Scene.
Tue 08.11.2016 - 7h - Added loading BVH tree to GPU when mesh is loaded to GPU. Improving bathroom scene, merging models, simplifying meshes.
Wed 09.11.2016 - 2h - Trying to optimize raytracing shaders - without results.
Thu 10.11.2016 - 3h - Added SpotLight, SpotLightParser classes. Added rendering of shadow maps for spotlights.
Fri 11.11.2016 - 3h - Sampling a shadow map when calculating illumination texture. Trying to fix Shadow Mapping.
Sat 12.11.2016 - 4h - Fixed shadow mapping. Artefacts caused by too large bias and incorrect viewport settings. Added setting viewport in RendererCore.
Tue 15.11.2016 - 2h - Implemented soft shadows using screen-space blur of illumination texture (work in progress).
Thu 17.11.2016 - 4h - Added RasterizeShadowRenderer and RasterizingShadowsComputeShader classes. Performing shadow mapping in a separate pass. Detecting for which pixels I need to cast shadow rays depending on preillumination texture (from shadow mapping). Added ignoring pixels outside of spotlight cone. Detecing bottlenecks in raytracing shadows shader.
Fri 18.11.2016 - 4h - Trying to raytrace shadows against multiple actors in a single shader pass. Modified setting shader params. Moved to Shader Model 5.1 to get variable indexed buffers. Trying to compile compute shader for SM 5.1.
Sat 19.11.2016 - 7h - Trying to deduce why creation of compute shader fails for Shader Model 5.1 despite successful compilation. Refactoring shader classes to load compiled shaders from file rather than compile in runtime.
Tue 22.11.2016 - 3h - Refactoring shader classes to load compiled shaders from file rather than compile in runtime. Added saving distance to occluder in shadow rasterizing and raytracing shaders.
Wed 23.11.2016 - 2h - Fixing raytracing shadows shader to work with multiple meshes at a time.
Thu 24.11.2016 - 4h - Calculating distance to light source from a shadow map.
Fri 25.11.2016 - 1h - Trying to fix calculating distance to occluder.
Sat 26.11.2016 - 1h - Fixed calculating distance to occluder.
Wed 30.11.2016 - 2h - Generating mipmaps (with minimal value instead of avaraged) for distance-to-occluder texture. Needed to spread distance-to-occluder info from shadowed areas to lit areas.
--- November 2016 - 79h
Thu 01.12.2016 - 3h - Generating mipmaps for distance-to-occluder texture using pixel and vertex shaders. Fixed Texture2D dimensions getters for mipmap level higher than 0. Sampling distance-to-occluder texture mipmaps to deduce shadow blur radius.
Sun 04.12.2016 - 2h - Added BlurShadowsRenderer and BlurShadowsComputeShader - extracted blurring shadows from shading to a separate pass.
Mon 05.12.2016 - 2h - Fixing issues and artefacts in soft shadows. Added modifyable emitter radius field to light. Added light info display.
Tue 06.12.2016 - 6h - Modified shadow map projection matrix to include regions slightly outiside of spot light's cone - to ensure proper soft shadow blurring near cone limits. Modified raytracing shadows shader to use illumination from shadow map in those regions. Fixed min-value-mipmap generation for dist-to-occluder texture. Added debug display of specific mipmap level. Modifying dist-to-occluder calculations to store illumination-blur-radius instead.
Wed 07.12.2016 - 6h - Modified dist-to-occluder calculations to store illumination-blur-radius instead. It's because blur radius should not be spread more than it's value during min-value-mipmap generation - and with dist-to-occluder there is no way of knowing how much to spread each value. Trying to improve intersections of hard shadows with soft shadows. Fixed a problem that soft shadow (large blur) overwrites hard shadow (small blur).
Thu 08.12.2016 - 4h - Trying to fix shadow blurring for pixels in soft shadow near hard shadow - to avoid blurring in parts of the hard shadow. Added lamborghini scene.
Fri 09.12.2016 - 3h - Working on Lambo scene.
Sat 10.12.2016 - 8h - Working on Lambo scene. Trying to fix issues with soft shadows - mostly failed.
Sun 11.12.2016 - 10h - Fixed many shadow issues (but temporarily worsened sampling quality - banding etc) such as light leaking (by rejecting samples which are too far from blur center), 1-pixel wide light on the bottom-right part of objects (caused by imprecise texcoord caclulation in blur shader), gaps between shadows. Decided to simulate soft shadows only inside the area of hard shadows (not spreading to the outside) - because of I couldn't spread info about blur radius properly outisde of hard shadows - there were gaps where soft and hard shadows intersected. Tested shadows for semi-transparent objects.
Wed 15.12.2016 - 3h - Adding mipmap generation on CPU.
Thu 16.12.2016 - 1h - Added mipmap generation on CPU.
--- December 2016 - 48h

--- 2016 - 566h
--- total 991h

24.01.2017 - 2h - Trying to figure a way to solve soft shadow problems - especially crossing of soft vs hard shadows while deducing dist-to-occluder from a Shadow Map.
25.01.2017 - 3h - Trying to figure a way to solve soft shadow problems - got good improvement by blurring blur-radius texture. Had to replace all maximum blur radius values with 0 before blurring. Added ReplaceValueRenderer, ReplaceValueComputeShader classes. 
26.01.2017 - 3h - Finished ReplaceValue shader and renderer. Testing shadow intersections using Ray Tracing. Trying to spread blur-radius information from shadows to lit areas.
27.01.2017 - 3h - Spreading blur-radius values for shadows. Spreading soft shadow through hard shadows (by spreading min/max blur-radius on different textures). Added UtilityRenderer to perform simple operations on textures such as max, min, spread, replace.
28.01.2017 - 6h - Spreading blur-radius values for shadows. Fixing shadow leaks from hard shadows in soft shadow areas.
30.01.2017 - 1h - Trying to clean up some calculation - storing blur radius in world space instead of screen space to avoid shadow artifacts when zooming in/out.
31.01.2017 - 1h - Fixed basic problems with switching to world space blur radius. Samples were rejected, because their position difference in relation to central pixel was too big.
--- January 2017 - 19h
04.02.2017 - 7h - Trying soft shadow blur with two blur textures - min and max. And then rejecting samples which have lower blur radius than central pixel (during blur phase). Fixed a bug in mipmap calculation for smallest mipmaps of non-square diemnsions. Thinking over new, optimized algorithm for spreading blur radius.
05.02.2017 - 3h - Added custom mipmapping shader, which avarages only "acceptable" samples. It's used to generate mipmaps for blur radius texture.
06.02.2017 - 1h - Improved sampling pattern in initial "blur radius" sprading pass - to improve smoothness on egdes. Tested generating one more mipmap of "blur radius" texture after spreading and then sampling it to improve smoothness.
08.02.2017 - 2h - Added spreading "blur radius" at every 4th, 8th, 16th pixel etc - to improve performance.
09.02.2017 - 2h - Fixed spreading. Testing.
11.02.2017 - 1h - Fixed blur-radius not being spread to bottom of the screen - caused by incorrect compute shader group count calculation.
12.02.2017 - 1h - Added a new shader to convert distance from screen-space to world-space. It will be used to convert blur-radius after spreading.
18.02.2017 - 4h - Approach with screen-space spreading + conversion to world-space reveiled a new problem - blur-radius spreading from foreground to background. So switched to another approach - using only world-space blur-radius and calculating acceptable distance for sample from center sample.
19.02.2017 - 6h - Fixed a surprising bug where the farthest dist to occluder were used instead of the nearest. Created a shadow test scene. Struggling to fix background to forground blur-radius leaks and other shadowing issues.
20.02.2017 - 2h - Brainstorming on solutions to shadowing problems - uneven spreading of blur-radius and incorrect spreading on foreground objects.
21.02.2017 - 2h - Checking PowerVR method of finding blur-radius (search in 4 directions in screen-space) - trying to improve it to work for very soft shadows with smooth blending.
22.02.2017 - 1h - Checked searching blur-radius and it worked nicely with minor, fixable glitches. Switching to storing distance-to-occluder instead of blur-radius.
23.02.2017 - 3h - Fixed important bug with distance-to-occluder: nearest dist was calculated, but the last value saved to texture was used - replaced with minimum of all values. Experimenting with many tweaks to distance-to-occluder searching, sampling patterns.
25.02.2017 - 4h - Improved sampling pattern when searching for distance-to-occluder.
28.02.2017 - 1h - Added AssetPathManager - to gather all asset paths and translate asset names to their absolute paths.
--- February 2017 - 40h
02.03.2017 - 6h - Used AssetPathManager in all file parsers to identify assets by their name rather than path. Added checking for duplicated assets (with the same name). Renamed duplicated assets.
07.03.2017 - 6h - Moved dist-to-occluder search to a separate pass. Added rendering of final dist-to-occluder. Added optional 2-pass (horizontal + vertical) separable shadow blur. Improved profiler display - removed redundant, temporary storage of results between updates.
09.03.2017 - 3h - Reading on HDR and Bloom. Implementing Bloom post-effect - extracting bright pixels and blurring them several times.
10.03.2017 - 3h - Completed Bloom effect implementation - merged blurred mipmaps with main image. Improved display of global profiling events.
13.03.2017 - 5h - Improved Bloom effect blurring - by generating mipmaps one by one from an already blurred mipmap. Added a simple resampling shader. Added a simple tone mapping with manually set exposure.
14.03.2017 - 3h - Refactoring code to use "shadow" instead of "illumination" in lighting calculations.
15.03.2017 - 1h - Refactoring.
16.03.2017 - 1h - Refactoring. 
28.03.2017 - 2h - Trying to improve shadow quality when soft/hard shadows intersect or shadow from a semi-transparent object intersects with hard shaow.
--- March 2017 - 30h
01.04.2017 - 4h - Trying to fix falsly sharp edges in reflections by adding hit-dist-search - averaging hit-dist from neighbor pixels.
04.04.2017 - 1h - Improving hit-distance calculation for reflections. Weighting samples to ensure smooth transitions and correct blur level.
05.04.2017 - 2h - Adding hit-dist samples weighting based on position/normal difference between sample and the center pixel.
08.04.2017 - 1h - Improving reflections.
09.04.2017 - 3h - Split combining renderer/shader into hit-distance-search and combining renderers/shaders. Added debug rendering of hit-dist and final-hit-dist. Added common shader utils file, which can be included in other shaders.
10.04.2017 - 2h - Refactoring shaders. Experimenting with hit-distance sample weighting.
11.04.2017 - 2h - Refactoring shaders.
12.04.2017 - 1h - Improving reflections - hit-dist spreading accross edges.
15.04.2017 - 4h - Improving reflections - spread hit-distance using do-while loop, starting with small search-radius, increasing sampled mipmap if no usable samples were found. The solution retains small details and spread hit-distance over large screen areas. Added performing hit-dist-search at lower resolution. Added hit-dist blending of low-res hit-dist search results with higher-res hit-dist results.
16.04.2017 - 4h - Improving reflections. Improving merging models - auto generating names for merged assets and placing them in good folders. Optimizing Sponza scene.
21.04.2017 - 2h - Improving reflections - improved hit-dist-search. Finally achieved smooth, circular spread.
25.04.2017 - 2h - Improving reflections - significantly improved hit-dist-search result smoothness by ensuring uniform sampling over circumference of the sampling circles. Improved performance by sampling higher mipmaps.
26.04.2017 - 2h - Improving relfections - Fixed hit-dist weighting for samples with hit-dist higher than max-hit-dist - clamped to <0, 1>. Improved weighting based on search-radius to reduce blur while preserving large search radius.
--- April 2017 - 30h
13.05.2017 - 1h - Improving relfections - simplifying hit-distance search significantly - no need to search samples on the other side of the screen - it's enough to just ensure nice edge transition through proper weighting of sky (far) samples. Added limiting FPS when window is not focused (to unload GPU and CPU).
14.05.2017 - 4h - Added two-way cast operators between float2/3 and int/2/3. Fixed debug sampling textures (by clicking on a pixel) which are smaller than screen. Refactored Application class a bit. Improved hit-dist-search by decreasing blur of very small values (which should remain small) sorrounded by high-value samples. Such small values occur at pixels where reflected objects touches the reflective surface. Fixed rejecting off-screen samples when combining/blurring reflection image.
16.05.2017 - 6h - Removed halo around objects in reflection - caused by accepting wrong samples (reflected off different objects) and by blurring from mipmapping (so even center pixel was affected, when sampling higher mipmaps). Applied fixes from CombiningShader to CombiningShader2.
17.05.2017 - 6h - Added color multipliers for textures (per model). Refactored Model class. Added AntTweakBar. Added Settings class to replace settings scattered all over the code.
18.05.2017 - 4h - Working on Settings class and refactoring, handler on settings change, adding new settings, color multipliers etc.
19.05.2017 - 1h - Refactoring, adding color multipliers to Control Panel.
20.05.2017 - 3h - Refactoring, added alpha multiplier, copying light sources, fixed display of single-channel textures. Experimenting with large area lights combined of many, smaller lights.
23.05.2017 - 2h - Refactoring of Renderer. Added SceneUtil class. Refactoring SceneManager, added Selection class.
24.05.2017 - 1h - Refactoring of SceneManager.
25.05.2017 - 3h - Thinking over how to refactor Renderer. Added RenderTargetManager class. Refactored Deffered Renderer.
26.05.2017 - 1h - Refactoring Renderer.
27.05.2017 - 4h - Refactoring Renderer.
30.05.2017 - 2h - Fixing problems after refactoring. Adding settings to Control Panel (FOV, exposure). Removed camera-pos from Raytrace Shadow Renderer and the related shader - as it was not needed anymore - blur radius is calculated in world space. Restored shadows in first-reflection layer.
31.05.2017 - 4h - Fixed occasional mismatch between Render Target pixel type and shader code. Added Animator class to animate lights and actors for demo purposes.
--- May 2017 - 42h
01.06.2017 - 2h - Working on Animator.
02.06.2017 - 4h - Working on Animator - fixed bugs, added bi-directional playback, play/pause. 
03.06.2017 - 6h - Reviewed PBR shading, fixed a potential bug in Fresnel calculation. Replaced ugly tonemapping with filmic tonemapping - fixed problems with too bright specular highligths and overly high contrast.
04.06.2017 - 7h - Added project decription on GitHub. Made some nice screenshots. Refactored shading calculations and moved them to a separate file. Fixed fresnel calculations. Learned a lot about microfacet shading model.
10.06.2017 - 3h - Added flipping UVs from Control Panel, re-laoding mesh to GPU.
11.06.2017 - 2h - Added shadows in refractions and improved combining of layers (as used for reflections).
12.06.2017 - 2h - Reading on antialiasing algorithms. Adding FXAA implemantation.
13.06.2017 - 3h - Integrated FXAA antialiasing. Inverted order of bloom and tone mapping - bloom is first now. Modified Tone Mapping to output LDR (Low Dynamic Range) image instead of HDR.
14.06.2017 - 2h - Adding shadows to higher level reflections.
15.06.2017 - 2h - Adding shadows to higher level reflections/refractions. Added an option to Control Panel to disable reflections/refractions alltogether.
16.06.2017 - 4h - Added SumValueComputeShader for summing total distance travelled by rays (without accounting for depth yet). Added a simple hack to get mipmapping in reflections/refractions - based only on that layer's hit-dist.
17.06.2017 - 4h - Refactoring main Renderer and sub-renderers to use common set of render targets per layer.
18.06.2017 - 5h - Refactoring main Renderer and RaytraceRenderer.
19.06.2017 - 1h - Fixing problem with some textures being reloaded to GPU unneccessarily as part of the model. 
20.06.2017 - 4h - Analyzed emissing emissive term in reflected image - caused by incorrect mipmap level calculation in raytracing shader. Added support for reload flag in textures, models - to mark if we want to realod them if they are already in GPU memory. Modified RenderTargetManager to create new RTs when needed. Also added methods to keep track of RT usage.
24.06.2017 - 1h - Refactoring Renderer to merge renderFirstReflections, renderFirstRefractions, renderReflections, renderRefractions into one method: renderSecondaryLayer.
25.06.2017 - 4h - Fixed a bug in combining shader for higher layers - it linearized prev-hit-distance (like depth) which was incorrect. Finished major refactoring of Renderer. Refactored RaytraceShadowRenderer, DistanceToOccluderSearchRenderer, BlurShadowsRenderer, ReflectionRefractionShadingRenderer to take render targets as inputs instead of using its own. Working on combining layers back to front (to fix hard edges in combined image).
28.06.2017 - 4h - Succeded at combining layers back to front. Modified reflection/refraction shading to not accumulate contribution/roughness over several layers - as it's not needed anymore. Refactored HitDistanceSearchRenderer to take render taregt as input. Fixed many issues with combining layers back to front.
29.06.2017 - 1h - Trying to fix problem with combining layers - refraction is too bright - combined twice in some cases.
30.06.2017 - 3h - Fixed problem with combining layers. Cleaned up to-do list. Creating Lego F1 scene.
--- June 2017 - 64h
01.07.2017 - 1h - Added scaling-down of blur-kernels for shadows and reflections/refractions (combining) when view-dir is almost parallel to surface (to avoid overblurring).
02.07.2017 - 1h - Added slider to Control Panel to modify global blur multiplier for reflections/refractions based on surface roughness. Decreasd that multiplier from 75 to 8.
03.07.2017 - 4h - Increased maximal achievable (visually) roughness. Fixed problem with blur-radius being non-linear in regards to roughness. Achieved great improvment in quality of surfaces with varying roughness. Added clamp to max sampled mipmap level to avoid blocky aliasing artefacts.
04.07.2017 - 2h - Fixed problem with refractions for gloss surfaces - caused by automatic rejection of central sample in blur kernel - weight of central sample is now gradually decreased for higher mipmaps.
06.07.2017 - 1h - Added modifying search radius and search step in dist-to-occluder serch depanding on distance from surface to camera.
08.07.2017 - 4h - Removed Debug_Direct3D project configuration - debug layer is now enabled for standard debug configuration. Added new configurations which build engine as static library - DebugEngineLibrary and ReleaseEngineLibrary. Fixed all configurations, tests included. Moved assets from project folder to solution folder. Split Application into Application and EngineApplication. Compiling PhysX.
09.07.2017 - 3h - Adding PhysX support, copying libraries, DLLs, configuring projects, writing startup/shutdown code.
10.07.2017 - 2h - Adding PhysX support, fixing project config, writing startup code etc.
11.07.2017 - 2h - Adding PhysX support.
12.07.2017 - 1h - Fixed project config, unified runtime library among engine and libraries.
13.07.2017 - 2h - Creating a physics actor for a block actor - using std::unqiue_ptr to store it with custom deleter.
14.07.2017 - 2h - Cloning actor with it's physics. Managed to run physics simulation.
16.07.2017 - 3h - Trying to track source of artefacts in reflections on SimpleTest3 scene. Fixed visible transitions between sampled mipmap levels. Enforced sampling color mipmap only at non-fractional levels. Fixed looping over kernel pixels when sampling-radius is fractional - outmost pixels' weight gets decreased if they are fractional.
18.07.2017 - 2h - Trying to improve rejecting samples in Combining shader - to reject more samples without limiting maximal achievable blur (roughness).
19.07.2017 - 1h - Trying to improve rejecting samples in Combining shader - by calculating expected position-difference in world space between sample and center sample and comparing it with the real difference.
20.07.2017 - 2h - Recompiled Assimp with newest Visual Studio to avoid linking to old VS libraries, redist packages etc.
23.07.2017 - 4h - Trying to modify the code to make Graphics Shader Debugger work - split creating DX device and swap chain.
--- July 2017 - 37h
08.08.2017 - 3h - Preparing New York Loft scene.
09.08.2017 - 6h - Parsing .obj + .mtl file as Block Model, with materials, color multipliers etc.
10.08.2017 - 5h - Separated loading external file formats from AssetManager etc (ex: .obj file). It simplifies AssetManager as it loads only internal files now. Renaming textures and .mtl fields for New York Loft scene.
11.08.2017 - 2h - Reading textures via Assimp - interpreting their type based on file name suffix (_A, _N etc) - to avoid relying on Assimp interpretation.
12.08.2017 - 10h - Fixed a bug - when selecting all actors, color multipliers from the first one were applied to all of them. Preparing and fixing New York Loft scene. Fixing bugs etc. Trying to merge models in NY Loft scene, resizing textures, fixing merging code etc.
13.08.2017 - 2h - Re-writing merging models.
14.08.2017 - 9h - Re-writing merging models.
15.08.2017 - 8h - Re-writing merging models, testing.
16.08.2017 - 3h - Re-writing merging models, testing.
20.08.2017 - 6h - Re-writing merging models, testing.
24.08.2017 - 1h - Re-writing merging models, accounting for original mesh pose during merge.
27.08.2017 - 1h - Working on New York scene.
28.08.2017 - 2h - Added light attenuation with distance. Working on New York scene.
29.08.2017 - 1h - Working on New York scene.
30.08.2017 - 1h - Working on New York scene. Merging models.
--- August 2017 - 60h
21.10.2017 - 2h - Trying to split shadow into hard/soft part without light leaks.
25.10.2017 - 4h - Splitting shadow processing (ray tracing results storage, dist-to-occluder-search, shadow blurring), into 3 layers - for hard, medium, soft shadows. To avoid problems when hard and soft shadows intersect and overlap.
26.10.2017 - 4h - Splitting shadow processing into 3 layers. Added an option to set debug name for Render Target when acquiring it. Added new utility shader which sums up 3 values per pixel.
28.10.2017 - 2h - Splitting shadow processing into 3 layers. Testing on different scenes.
29.10.2017 - 7h - Refactoring/cleanup of shadow-blur shaders. Improving dist-to-occluder-search to give more smooth results, without jagged edges etc. Fixed a bug in mipmap-generation-with-sample-rejection shader - it was outputting negative values because of missing max(). This was causing jagged edges in dist-to-occluder mipmaps. Added radial weighting in dist-to-occluder-search shader - to improve blending of nearby regions (plus early rejecting samples without sampling the texture).
30.10.2017 - 2h
31.10.2017 - 4h - Added sampling different mipmaps during dist-to-occluder-search for hard/medium/soft shadows. It's better than skipping pixels, as it ensure smooth output image rather than undersampling artefacts and patterns. Added a setting to control final-dist-to-occluder texture diemnsions for hard/medium/soft shadows - important as it directly influences the number of executed shader threads (caching hides the benefits I guess). Fixed a bug in generate-mipmaps-with-sample-rejection shader, which was outputting zero if all samples were rejected instead of returning the original value - that caused background switch from white to black and increasing darkening of edges in dist-to-occluder mipmaps.
--- October 2017 - 25h
01.11.2017 - 10h - Added a separate setting for dist-to-occluder-search to control search-radius and search-step for pixels in shadow and in light (those which have a dist-to-occluder value and those which don't). This is supposed to reduce blur of distance values in regions of shadow - to avoid artifacts when object move close to each other etc. Fixed a problem with dist-to-occluder-search shader - it was sampling position/normal textures using integer coords, which caused problems when output dimensions stopped being the same as position texture dimensions. Fixed text rendering.
02.11.2017 - 6h - Cleaned up Profiler events, added missing ones etc. Disabled unnecessary shadow calculations when shadows are disabled. Fixed a problem when importing models that have no textures, but only texture color multipliers. Null texture was causing problems, so I added a default white texture used in such cases during import/parsing of models. Cleanup of TODO list.
05.11.2017 - 5h - Added settings in Control Panel to control position threshold in blur shadows shaders. Trying to remove light leaks at the transitions between shadow layers.
07.11.2017 - 1h - Trying to find a bug in causing shadows from different layers to overlap.
08.11.2017 - 1h - Trying to find a bug in causing shadows from different layers to overlap - the bug is different. Fixed a bug where medium shadow image divider was used for soft shadows.
11.11.2017 - 3h - Trying to fill shadow layers with zeros in places where they are not used - to avoid leaking light is some regions. Not working - it seems I don't understand the problem.
12.11.2017 - 6h - Fixed problem with light leaks - it was caused by casting floats to ints and loosing precision when summing up shadow values - fixed by adding rounding to the nearest integer. Fixing artifacts in Lambo scene - caused by too low normal threshold for dist-to-occluder-search.
19.11.2017 - 4h - Fixed a problem - reflection/refraction was always slightly blurred (despite zero roughness) - it was caused by bugs in the combining shader - sampling redius was never zero.
--- November 2017 - 36h
25.12.2017 - 2h - Tested impact of specular elongation in reflections - it is amazing - a must have!
26.12.2017 - 2h - Testing radial weighting of reflection/refraction samples during combining.
28.12.2017 - 3h - Tested how reflection lobe differs from specular lobe used in shading. Compared reflection of a small emissive object with a specular lobe of a weak light source - they were very different at the beggining, but after adding Gaussian scaling of reflection samples they got much more similar. It improved overall reflection quality. Added new Control Panel tab for reflections/refractions, added sampling quality setting.
30.12.2017 - 1h - Added additional emissive color multiplier to Control Panel - to achieve values over 1. Unfortunately they are seemingly clamped anyways by the render target.
--- December 2017 - 8h

--- 2017 - 391h

10.02.2018 - 2h - When blurring hit-distance, near-zero values usually get over blurred, because of how easily they can be dominated by larger values. Added a setting which helps reducing that effect and maintains sharp reflections where object touches reflective surface. It lerps between blurred hit-distance and original hit-distance.
25.02.2018 - 5h - Trying to fix light leaks between shadow layers through overlapping those layers (sharply/smoothly), overlapping dist-to-occluder data etc. Achieved big improvment, but shadow "fluidity" on camera movement is now worse.
26.02.2018 - 0h - Added ceil() in raytracing shadow shader to handle numerical errors and prefer slight overshadowing rather than light leaks. It helped just the tiny bit that was needed.
27.02.2018 - 4h - Trying to fix light leaks on shadow layer transitions through multiplying final shadow value by 104%. It helps a bit, but makes shadow edge a bit harder. New problem understood: shadows on different layers are partly the same shadow (same part os source light occluded). But we treat them as independent and this causes overshadowing and shadow bubbles. Added CombineShadowLayersRenderer to make some math operations on layers when adding them. LIke substracing hard shadow from medium, and hard.medium from soft. It fixes shadow bubbles nicely, but exposes light leaks on layer transitions.
28.02.2018 - 2h - Tried to remove blurring of shadows on layer transitions by marking regions occupied by other layers in dist-to-occluder texture (using some extreme value). It worked and actually removed light leaks on layer transitions. But how to tell layer transtion from normal shadow intersection? Because that solution corrupts shadow intersections between layers.
--- February 2018 - 13h
--- total 1395h

03.03.2018 - 2h - Finally found the solution! Shadows work perfectly! Substracting hard shadow from medium one, and hard/medium from soft is needed. And then the layers can overlap, even at great extents, and everythings stays fine. So making them overlap (with hard transitions) solves the problem of light leaking. Great!!!!
14.03.2018 - 2h - Modified Animator to be a template class to support animation of any kind of object. Added animation playback for Camera.