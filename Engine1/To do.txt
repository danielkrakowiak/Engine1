19.03.2014
	- when creating fipImage in Texture2D - FREE_IMAGE_TYPE is set to FIT_BITMAP by default. However, it is not always the appropriate file type for image. Ex.: 16 bit grayscale heighmaps have different file type. Maybe it should depend on special file formats defined in AssetFileFormat such as RAW_16BIT?
28.03.2014
	- Handle errors in AssetManager::loadAssetsFromDisk and AssetManager::loadAssets - threads shoould not be terminated, exceptions should not be thrown, path to assets should be removed from assets - maybe handle by not doing anything?
11.04.2014
	- Write = operator for every class with copy constructor (otherwise default copy constructor will be used)
12.04.2014
	- check whether all DirectX headers point to the right SDK (by pointing the cursor over an include)\
	- add loading to Gpu to asset manager (read about async resource loading before - probably one loading thread is enough)
08.11.2014
	- add more methods for manipulation float44 and float43 - ex. getRotation rename to getRotation, get4x3 rename to getRotationTranslation, add setRotationRow1 etc
	- change bone pose format from float44 to float43 - beacuse last column is useless anyway
15.11.2014
	- methods which return references (especially to lists) should retrurn shared pointer rather than reference. 
	- add File class with path, type, data, loadedFlag? use it in all assets classes (Mesh, Texture etc)
	- SkeletonAnimation requires bonesNames to work (mapping of names to bone indexes) - how should these names be passed so that each SkeletonAnimation doesn't store a copy of that list (shared_ptr?)
	- should boneNames have it's own class with methods like getBoneIndex( std::string name ) ? - would it be used anywhere else but loading animations?
21.11.2014
	- does combining two SkeletonPoses really work? Especially in the case where the same bones are manipulated in both poses. How about joining three or more poses?
	- optimizing SkeletonPose in terms of memory usage? What is the size of this object when used for a typical or large animation?
28.12.2014
	- Const methods ( ex. const Mesh & getMesh() const ) should always return const-object or const-reference. Non-const versions of the same methods can be created to allow modification of the object. 
	- add const and non-const version of some methods (getters mostly) to all classes. Use const method in non-const method. Use const_cast<type> to convert types from const to non-const.
13.07.2015
	- Go through all "throw std::exception" and make sure that throwing method has parenthesis "()" in the error message.
	- Add tests for SkeletonMeshVertexShader checking if it throws for incorrect bones-per-vertex-values.
11.11.2015
	-  Texture2D::createFromMemory - WARNING: casting away const qualifier on data - need to make sure that FreeImage doesn't modify the input data!
12.11.2015
	- AssetManager: add due time as priority for each asset in AssetManager. Asset's subassets should be loaded with it's owner's priority.
	  When inserting assets to load in the queues they need to be inserted in the order of increasing due time.
	- IMPORTANT: There is one problem: if one thread (loadAssets method) waits for the sub-assets to be loaded, then it's not loading any assets at that time. Maybe there should be more threads, but only the given number of them active? Non-binary mutex or something?
29.04.2016
	- [Texture] Add constructor from exisitng DX texture and render target view (or swap chain?). For access to the backbuffer.
	- [Texture - Refactor] Can I remove initialize methods from Texture2DGeneric? Move that code to constuctors...
	- [Includes Cleanup] Some headers include <d3d11.h> although they only contain references and pointers to DX types. Replace with forward declarations.
	- [Test Texture] I should test whether constructor options like generateMipMaps (ex. for RenderTarget) really work for all the bindings and remove them if they are not supported.
21.08.2016
	- [Texture - new] How to handle texture arrays (also with mipmaps). Should it be a separate class. How to handle all that complexity? How to use the existing texture class?
	- [Shader params] Add support for setting empty SRVs, UAVs etc among non-empty ones.
31.08.2016
	- [ Texture copy ] When copying texture GPU - GPU we should check if their dimensions are the same - otherwise throw exception.
20.09.2016
	- [ BinaryFile ] Reading/Writing could a template method - able to read any type from file - such as int/float/float3 - it works as a copy anyways...

For later ######################################################################################################################

//////////
 - Add some math functions to measure corruption of matrices

 - Add: matrix difference (sum of squared distances), matrix inverse, measure matrix orgonality (multiply inverse by the transpose and return difference to identity matrix)
 - Optionally add: orthogonalization - later on... To fix corrupted matrices and compare visual results

/////////

- option to read os some range of keyframes/time/ticks from animation file
- option to split an animation into a few by keyframe/time/tick etc.

- add move constructor to some classes? (but only the ones which are designed to be returned from methods by object) 
- add move assignment to some classes? (but only to those for which creating another object from an existing one makes sense)

- test combining poses (skeleton-space, parent-space)
- add method to substract poses (leave only the difference between poses)


- add option to ignore bones which are not in mesh when loading an animation file. How to make sure that missing bones are not in between of the existing ones? Useful to apply complex animation to a sipler version of mesh (LOD etc)

- Refactor Font and FontCharacter classes.

- in BlockMesh, SkeletonMesh buffer getters should return reference?

- 3d text rendering

- make RectangleMesh derive from BlockMesh (to be able to render it with BlockMeshShader) ?

Next2:

	- zdublowac gettery w SkeletonMesh tab by byly wersje const i non-const. Jak w BlockMesh.

##################################################################################################################################

--------------------------------------
	Problems with texture class:
	- No generic class without template params to be used as method arguments.
	- PixelType has no usage for textures which are only stored on gpu (like render target) - but restricts their usage in methods etc.

	How to deal with textures which are not loaded, but store file information (when parsing ModelTexture files etc). 
	Should it ba possible to create empty textures? But lock them internally to make any action impossible?
	But probably a more elegant solution can be found. 
-------------------------------------
	IMPORTANT: AssetManager tests (event the first one) make whole test execution to fail for all tests. But only in Release builds. It works fine in Debug. Why?
-------------------------------------

##################################################################################################################################

 - IMPORTANT: ray tracing shader has better performance with D3D10_SHADER_SKIP_OPTIMIZATION flag set. Why? 
   How to configure the shader to avoid optimizations only where it really improves performance, but not everywhere?
   
   Also2: pass stack depth to the shader as constant or...
   Also3: Compile a few versions of the shader with different stack depth and use the appropriate one?

   - After creating BVH for a mesh - mesh's triangle vector could be replaced with the one from BVH. It's just a matter of reordering the triangles.
     Then, there would be no need to send a seperate buffer to GPU just to mark which triangles are in BVH nodes. Nodes would already contain triangles from mesh triangle list.

	 - textures which use float4 for vectors (rayDir, rayOrigin etc) could use float3, because such format exists.

	 - add loading (drag&drop) animations and applying it to the default skeleton model if they match.
	   Would be good to check if they still work and check how reflections look for them.

	- PERFORMANCE: buffer containing "surface position" in DeferredRenderer could be reused to store ray origins in the RaytraceRenderer. 
	    It would have to be read and rewritten as UAV to slithly adjust ray origins along the surface normal to avoid self-collisions of ray with the reflective surface.

	- check how reflection looks when calculated only for even pixels. middle pixels can receive half of the calculated color from each side (addition).
	  What's the performance difference?

	- algorithm creating BVH uses the same step when moving dividing planes no matter the size of the model. 
	That's not too goood. It should use something like 1/1000 of longest bbox dimension or similar.

	- add g-buffer name display in the corner - how to do it elegantly? These are not full rgba textures...

	- final blurring of reflections: sample mipmap one/two levels less blurry than you need (with/without filtering? any cost? use filtering between points) 
	  and then apply 5x5 gaussian blurr to smoothen pixel borders. Or similar.
	  Must read before!!! : https://bartwronski.com/2014/03/23/gdc-follow-up-screenspace-reflections-filtering-and-up-sampling/

	  - should measure the cost of generating mipmaps for the color target! Compare it with cost of running blur kernels.

	  - the problem is bleeding reflections through the edges - note it down somewhere.

	  - create a edge-detection shader which writes distance to the nearest "reflection edge" based on position/normal/ray direction whatever.. Could use multiple passes and shaders.

	  - probably need to add some memory barriers in the compute shader for edge distance. Pixels written by some threads are read by others. Read aboubt sync in DX book.

	  - IMPORTANT: optimization of edge distance calculation: pass "current render pass index" to shader and then ignore threads with current edge distance smaller than pass index 
	    (they are calculated already - no point in recalculating it again). This way less and less pixels will have to be calculated each pass. And zero at some point!


	  - have to upscale mipmaps to at least half the screen size to avoid aliasing when moving camera.

	  - I could limit reflection mipmaps to let's say 4x4 - there is not much point in having even rougher reflections - and to store their upscaled mipmaps at half screen resolution.

	  - upscaling has to happen in steps - upscale by factor of 2 each render pass. Otherwise it gives no advantage over simple sampling. How to do that efficently with 3d texture?

	  - instead of texture array for reflection upscaled mipmaps use 3d texture. It allows for sampling between layers based on dynamic, float level.

	  ////////////////////

	  - why unsigned char textures are displayed/loaded with artifacts? Add texture path to debug name.

	  - IMPORTANT: FreeImage has some trouble loading grayscale png image. What's the problem?

	  - add modifying light params using keyboard shortcuts.

	  Test this idea:

	  - try decreasing far neighbors weigth and check how it influences image. It mimics how most rays reflect near center ray, so they have bigger impact.


	  * To allow for recursive ray tracing:
	  - accumulate specular term multiplier (something like combined surface param)
	  - add total distance covered by ray (maybe except for primary ray depth)
	  - accumulate roughness? accumulate based on distances between levels?

	  How to generate upscaled mipmaps:
	  - start with 2 level mipmap - render it stretched to 3d texture layer 0.
	  - take level 3 mipmap and render it to level 2 mipmap. Then render level 2 mipmap to 3d texture layer 1.
	  - take level 4 mipmap and render it to level 3 mipmap. Then render it to level 2 mipmap. Then to 3d texture layer 2.
	     and so on... - but how about the problem of binding the same resource on input and output? Should I have separate shader resource view for each mipmap level as well to avoid the problem?

   ----------------------------------------------------
   Refactoring:

	- Change naming convention: use m_ in class members.
	- use ComPtr wherever possible instead of raw pointers.
	- use short "Idx" for "index" in the whole code + shaders.
	- rename Texture2D to Texture2D

	- add uint type, which would be just a typedef for unsigned int - could be in math in separate header file.
	- rename "ReflectedRefracted..." shader names to "SecondaryRays...".

	- shader could use g_ in global variable names. Because names often reapeat.

	- get rid of "Direct3D" from class names. It's used all over the code anyway - no reason to mark specific lass with such prefix.

	- all UAVs and render target could be uniformly called "RenderTargets" - everyone knows what that means. No need to differentiate all the time between UAV and RT.

	- should I also const things inside the vectors -> const std::vector< const std::shared_ptr< const Light > > ??

	- rendererCore should also allow for setting viewport dimensions and depth range. It's done manually in FrameRenderer and CombiningRenderer, but it's wrong this way.
   ---------------------------------------------------

*** IMPORTANT:
It's strange that we set textures in FragmentShader's setParameters method, but we set buffers in RendererCore draw method. It should be unified.
Example: draw(or renamed to render) method should take model instead of mesh and set textures accordingly. Or buffers should be set in VertexShader setParameters method...
Also constant buffer is set in setParameters...
Also only the shader know on which slots it binds resources. So only the shader know ho to bind/unbind them correctly. Doing it from outside is just guessing and won't work for more complex/diverse shaders.
So probably set buffers, textures, uavs from shader class.

**** IMPORTANT 2:
Maybe I should createa Buffer class. Same as Texture2D. Because we need to store quite many resource ptr to directx with each buffer plus C++ vector. Could be good to group them up. 
Could be a template class taking it's element type at template argument. It would also simplify sending data to and from GPU using buffers. When building volume data structures etc.
+ Check bind flags on different resources - ex. vertex buffers (and normals etc) have bind flag - "default", but should rather hvae "immutable". Default means that I expect GPU to modify these buffers.


-----------------------------------------

Ability to select an actor by clicking on it. Using ray tracing.

Add other phases of rendering. Rendering color, normals etc. Then rendering the final image. 

How to do raytracing on the GPU --------------------------

First shader: For all rays, find the intersection distance, hit actor (or model), hit triangle -> save to texture.
For each actor in the current scene node run second shader (pass model textures etc):
Second shader: For all rays, calculate the received color.

How to pass many meshes to shader at the same time?
* Maybe use one huge buffer for vertex data and each mesh has a view to only a part of this buffer.
And then also one special view to access the whole buffer.
* Or the same huge buffer approach but with each mesh remebering it's start/end index in that buffer.

----------------------------------------------------------

Implementation order:
1) Generating rays from camera (for test) or from depth buffer
2) Outputing rays as pixels, (pos, albedo, spec, roughness etc)
3) Ray-Box test
4) Shading a layer (no shadows)
5) Shadow-rays tests
6) Storing scene (mesh list/ptrs) on GPU
7) Ray-Mesh test


1) for each layer:
- render depth/pos + albedo/normal/spec/roughness (using DX or RT)
- shade - 1 pass for each light - use SM/RT -> color
2) for each layer - from the last one
- blur the reflections, refractions
- combine with the previous layer

Idea:
- when calculatin range of a light source - it's bounding volume doesn't have to be a sphere. The more precise the bounding volume to more calculations we save. Maybe even a few volumes could describe a lights range?

----------------------------

	  - should I rename refration into transmission? To differentiate them more..

	  - we probably need to store current ray refraction index - the whole history for each ray - as many buffers as there is for reflection/transmission term.
	  - if we hit surface from inside (deduced from normal), than we need to invert refraction index? How to know refractive index of air, water if we are in one mesh, inside another and another etc?

	  - rename albedo render targets to albedoAlpha.

	  - rename reflectionTerm texture in combining shader and classes. Should be called contributionTerm. Check for incorrect assumption regarding reflection/refraction too.

	  - experiment with increasing minimal contribtuion for the ray to be generated and traced. How high can we go for higher levels?

	  

	  - add exceptions and check if wrong level is passed to reflectionrefraction renderer.
	  - remove unnecessary 'level' and 'prev contribution term' from firstreflectionshadindg and firstrefractionshading.
	  
	  -----------------------------

	  - PERFORMANCE IDEA: higher level reflections/refractions could be calculated with smaller work groups - because only some pixels in the group need to be traced and many are black. Large groups cause waste of cores.

	  - MINOR: do we really care about solid object having reflections from backfacing triangles? Like inside a glass wall or aquarium wall? How could we ignore it elegantly with customization?

	  - shading is incorrect for reflection (possibly refraction too). 
	  When something has white albedo and high metalness, I should not see white albedo in reflection but only the reflected color. At least I think so...
	  Commenting out specular part in reflection shading fixes the problem. But what should I really do? Or it actually works when roughness is really low.

	  - should alpha impact the surface color used for shading? Yes. Should it also impact shading reflections?

	  - NEXT: dealing with varying refraction index.
	  - when we enter a surface, we read refractionIndex from screen buffer.
	  - when we leave a surface, we read refractionIndex from our last refraction index (stored in the buffer?)
		- maybe use texture array with refraction indices (like a stack) and the other texture as a counter of where we are on that stack for each ray.
		- when entering a surface - push to stack, when leaving - pop from stack (by decreasing the counter).
		- what format to use for refraction index
		- only need to access these textures when generating secondary rays.
		- store these textures in raytracer like other textures.
		- where to pass/store initial refractive index? Common for all primary rays.

	  - why mipmaps are not generated on gpu in TTexture? Because that would require them to be RenderTargets... There is already a method for that in TTExtureSpecBind. Should we wait for CPU implemantation of generating mipmaps?

	  - IMPORTANT:  In generate refracted rays shaders - Why HLSL compiler crashes without "skip optimization" flag?

	  - PROBLEM: If we don't enter an object, we don't know what's the refractive index outside of that object... So if we start inside of a glass ball, we don't know which IOR to use when leaving the ball.

	  - IMPORTANT: Investigate whether we need to invert normals during normal shading (for backfacing trangles).

	  - IMPORTANT: Pass refraction index for current and prev object when shading refractions (in refraction shading shader).

	  - PERFORMANCE: Maybe it's faster and still correct to invert normals (when ray hits from backface) in raytracing shader rather than in each other shader separately.

	  IMPORTANT:

	  - we assume that refractions are always computed through shaders/classes with "fisrt" in their name. But that may not be true. And the name is misleading. 
	  Because it only happens like that if refraction occurs first, and then reflection/refraction. But if reflection is fisrt, then these shaders/classes are not used at all. What kind of bugs can result from this.
	  Rename shader and classes and replace word "first" with something else.

	  - support for any resolution. - almost done. Something wrong with higher level reflections/refractions. Maybe the contribution term fill size etc? And there is no refractions...
	  - reflection/refraction shading renderers also have some buffers which should have lower resolution. Account for that and downsize them to the same size as raytracer's buffers.
	  - should reflection/refraction shading use integer texcoords? As it's input the same size as output always?

	  - suport for any resolution - part 2 - lower resolution should be accounted for correctly in combining shader to avoid increasing roughness globally (as it happens right now).

	  - raytracing shadows can be done at half resolution (or much less for reflections). And then sampled with interpolation.

	  - how to make skybox not receive shadow? To improve performance...

	  NOW:

	  - when I save distance to occluder in shadow map i take distance to the closest-to-light occluder.
	    But when I do this for ray tracing i get get closest-to-ray origin occluder.

	  - IMPORTANT: what happens with soft shadow when two objects cast shadow which are near to each other, but with different blur radius? On is rather sharp and the other rather soft. How the algorithm should blur the space betweeen them (or covered in both shadows)?


	  - it seems it fucked up something when passing SRVs to raytracing shadows shader.... Fix it first using debug layer...

	  - distance to occluder in shadow rasterize shader should be linearized I guess...

	  - be careful about linearizing depth values when writing distance to occluder - zNear and zFar should be passed as param and should be the same as used to render the shadow maps.

	  - try to compile shader with fxc.exe and load the compiled shader....

	  - shader need to have full names.. because they will be stored in a single output folder.

	  //////////////////////

	   Maybe I can somehow glue buffers together???????? Send them as one to shader despite being many...

	   Higher shader profile???

	  /////////////////////

	  - GOOD FIX: it may be much better to store shadow blur radius in a texture rather than some dist-to-occluder. Because by blur radius we know how much to spread that value (no more than it's value), but for dist-to-occluder we don't know that.

	  - IMPORTANT MAJOR FIX: I could fix most of the near-screen-edge problems by rendering the whole thing with a bit larger resolution... 
	    I could event lower the quality a bit for those regions. A lot of possible ways and not too much of overhead... I could also ignore those extra regions when performing blurs etc.

	  - everything that is outside of shadow map should be treated as lit for most of the time... to avoid artefacts when blurring soft shadow...

	  - make sure to avoid raytracing shadow rays outside of spotlight cone... don't depend on preillumination as it may be falsly lit.

	  - point lights are not working correctly - I need to support them through raytracing everything. Without sampling preillumination etc...

	  - to correctly blur shadows near the spot light cone limit I have to have a bit larger shadow map - with larger fov than the light itself.
		So maybe I can enforce different fov for light and shadow map... Maybe even depending on light radius - to not waste resolution for lights with small radius.

	  - add light radius to lights - to be used when blurring shadows...

	  - fix problem with spotlight cone angle limit - should be a sharp shadow always - not blurred.

	  - option to optionally change the mipmap level of the texture you are seeing as active view (useful for intermediate textures - such as dist-to-occluder- should swithc to zero each time you change active view?).

	  - we only have dist-to-ccluder for pixels which are in shadow. How to spread that info? Best idea: Kind of custom mippmaping of dist-to-occluder texture, but instead of avaraging pixels I take a minimum of 4-pixels.
	    This way dist-to-occluder spreads from edges to the other parts of image. Should be gentle on memory as well...

	  - IMPORTANT PROBLEM: when writing distance to occluder in rasterizing shadow map step - we always save it for the closest object... But when two objects cast shadow... the distance to occluder should be saved for the one which gives the most sharp shadow...

	  - OPTIMIZATION: When I read from raw buffers in raytracing shaders I can read multiple values at once. Using Load2, Load3, Load4 methods... I need to try it!!

	  - check all shader with SKIP_OPTIMIZATION flags and check if they are faster/slower with/without this flag.

	  - VERY IMPORTANT: should I switch to reconstructing position from depth globally - it would reduce read bandwidth by factor of 4... And it seems to be the bottleneck...
	    But I need to know ray direction anyways...
	    But maybe later once I clean up the mess with shadows...

	  - why shadowRaytracing shader costs 2ms even if it does nothing, but color the regions for which rays will be traced... Because of running it for every mesh... How ti improve that?
	    I am probably burning bandwidth like hell by reading the same textures (screen-size) over and over..
		Or maybe the problem is the number of runs or the fact that the shader writes to the illumination buffer... Maybe it shouldn't write if does nothing...
		- Idea: I could handle the first copying from preillumination texture as a separate pass... to avoid worrying about it later on for every run.
		- Better idea: Just copying values from preillumination texture. Or preillumination could be copied entirely using a copy drawcall (no need for another shader).
		- Reading the "ray origin" texture seems to be the bottleneck. Probably because it's float4 expensive format. I could use depth instead to save some bandwidth. But it's still not scalable enough...

	  - IMPORTANT: Can I somehow tell the compiler to not synchronize writes to the UAV? To ensure that I won't write to the same pixels from different threads... That could boost writes a bit..
	    Is it really worth the effort? Or switching to pixel shaders?

	  - OPTIMIZATION: Can I deduce for which screen region it is worth to run shadow raytracing shaders by projecting bounding box on screen - to avoid running shader for pixel which won't do anything in that particular run.
	    To disable whole groups of threads by running them only in some square region of screen.

	  - blurring shadows could be done in a separate pass... To shorten the shaders.. Why mix it with shading... Also easier to track performance...

	  - OPTIMIZATION: when detecting pixels for which its useful to trace shadow rays I detect the need for pixels at the edge of spot light cone. There is no point to trace these rays. How to avoid that? Calculate dot in the shader for that light and compare with cone angle?

	  - how to quickly tests neighbor pixels in preillumination texture? Create one or two mipmaps for it? And then sample only one pixel? Good because it doesn't miss any pixels like sparse samples could....

	  - use normal when calculating blur radius for shadow... to avoid dim shadow at flat angles.

	  - need to handle casting shadow rays for pixel which are too far from the spot light (ex. above 100m which is max for shadow map).

	  - PROFILING: how to track the total number of traced rays?

	  NEEDED TEST SCENES:
		- a tower in the desert - to show shadow far from the occluder. How it looks with shadow map and how with ray tracing. How soft shadow acts with distance, how soft shadow look using RT or SM.

		- how to handle semi-transparent models in shadow mapping phase?
		- should there be a separate shadow raytracing shader for lights without shadow maps?

	  - THOUGHTS ON MY TECHNIQUE FOR SOFT SHADOWS:
		- the only way to get sharp shadows is to calculate them in screen-space
		- and when doing it in screen-space I found a prety good technique to make them soft where needed
		- we can also know the needed quality in advance and trace rays where sharp shadow is needed and use shadow map where soft shadow is needed (as optimization)
		- and generally use shadow map to avoid tracing most rays (fully illuminated or shadowed).
		- FIX: I have to fix fake bright samples...
		- FIX: problem when looking at flat angle - smaller screen space is covered in shadow and shadow gets too dim...
		- FIX: handle samples outside of screen - or rather mipmap generation fails for screen regions near egdes..
		- how this blurring would work in reflections? When it is needed?

	  - what is the size of the penumbra? Source: https://www.nde-ed.org/GeneralResources/Formula/RTFormula/Unsharpness/GeometricUnsharpness.htm
	    How much to blur shadows based on light source size, distance from light ot occluder and distance from occluder to shadow receiver.
		u = lightRadius * ( occluderToSurfaceDist / lightToOccluderDist)

	  - Do I know the length of the shortest shadow ray for given pixel? No... Needed only for area lights...
	    I should probably store it in a separate texture.

	  - should not sample shadow map in every raytracing pass!!1 Should only do it once and then improve the edges using raytracing...

	  - Good paper (a bit lod now...) describing various soft-shadow techniques: http://maverick.inria.fr/Publications/2003/HLHS03a/SurveyRTSoftShadows.pdf

	  - maybe I should try blurring the shadows as the distance to the obstalce increases? I would probably ned more expensive ray tracing to get min distance to obstacle... 
	    Or use depth from a shadow map. Maybe despite of variable blur radius I could use two-pass blurring? How to deal with perspective when blurring?
		IMPORTANT: Why nobody is doing this? Blurring illumination texture...

	  - add changing viewport size to RendererCore - add setting viewport size in different rednerers and when rendering shadows...

	  - why can i see the skybox in the mirror in the bathroom scene? The skybox is supposed to be removed from the scene...

	  - use sampler2DShadow as in http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-16-shadow-mapping/ to know if we are on the shadow border...?

	  - optimization to shadow mapping - use border value and D3D11_TEXTURE_ADDRESS_BORDER and remove if in the shader checking if sample is within texture area.

	  - maybe use different vertex shader for shadow maps....

	  - why spotlight seems to be shifted when looking at it's shadow? Maybe I should compare it against it's raytraced shadow?

	  - VERY IMPORTANT: Is bounding volume test sensitive to ray direction and ray max distance? 
	  Or is it testing ray forward and backwards? That would be a huge waste of power to test against triangles which have no chance to intersect..
	  Ignore bounding boxes which are too far!!!! Both for shadows and for view rays (for boxes which are further than current min).

	  OPTIMIZATION: When testing shadow rays we know the maximal ray distance we care about... We shouldn't test against nothing furhter than that distance...

	  - IMPORTANT TEST: How much the shadows would cost if they only used bounindg boxes for tests... Can disable self-shadowing for test..
	  Because if the cost is very low, then maybe it's not a big optimization to use shadow mapping for hard shadows..?

	  - optimize walls and floor in the text scenes - they have tons of triangles.
	  - optimize all meshes...

	  - display GPU name and optionally also CPU name on the screen

	  BETTER IDEA: Start merging using with the type (albedo, roughness) which has the most unqiue textures. Then use that texture placement for other texture types.
	  If some merging is not possible (using texcoords, not pixel values) then throw exception.

	  Is my sorting stable? Not moving items which are in correct order?

	  - NOW: UVs get recalculated incorrectly after merge? All meshes have the same UVs ? Or maybe even zeros as UVs?

	  - fix merging models when all models share one alpha but have different other texutres.


	  - shadow mapping? use it instead of raytracing for a while?

	  - setting light intensity + how to set light color?

	  - check which shaders are running with "skip optimization" flag? Maybe we slow down because of that... Is raytracing shader still faster with that flag?

	  - selecting many actors by holding LMB and Shift? How to do that?

	  - place profiling events everywhere - need to know how much time is spent on higher reflection levels...

	  - create example kitchen scene

	  - why skybox has reflections? Why roughness == 1.0f doesn't cancel raytracing? Bad skybox texture?

	  - do I really want to do shadow mapping?

	  - mipmapping (someone will probably ask about that) ?

	  LATER:

	  - avoid loading models several times - once for each index in file. Especially avoid loading .blockmesh file twice.

	  - all file parsers should:
		- append data to given buffer when writing (not clearing it as it is now!)
		- read data while checking not to cross the given end iterator - should also check for negative sizes etc.
		- how to elegantly avoid resizing data vectors during write (ex: mesh + bvh). - probably the same way as in BVHTreeParser

	  - do I have to account for window frame height, borders etc when creating window? Is my image streched down?

	  - own mesh format + format for storing BVH trees.

	  - support for variable resolution per reflection/refraction depth

	  - OPTIMIZATION: Replace float4 with float3 wherever possible in framebuffers/shaders.

	  - OPTIMIZATION: Trace 4 or 8 rays in a single shader. Could give amazing boost, because we construct triangle only once and do a few intersection tests with it. Could be tested in normal raytracing or shadow ray tracing (even soft shadows).

	  - FAILED OPTIMIZATION: - pass 4 meshes at once to shadow raytracing shader.

	  - should add Model class as a base for BlockModel and SkeletonModel. All texture methods could be shared. Plus flags such as "cast shadows" etc.

	  - OPTIMIZATION: Mapping/Unmapping constant buffer each time we setParameters to shaders has to be very costly. How can I avoid that?

	  - getting mouse pos is bugged - get absolute positon, while should get position relative to window.

	  - shadow mapping

	  - all paths in models/scene should be relative to main folder or asset folder (could be useful if someone else was trying to test my application)
	  
	  - mipmapping
	  - own mesh format
	  - cubemap texture class - to use for skybox

	  MUCH LATER:

	  - BIG PROBLEM: When merging models - we create a texture atlas for albedo textures. But rougness textures or emissive may have completely different dimensions and be placed differently in the atlas.
	  So we somehow have to enforce layout withing the atlas based on the first created atlas. How to deal with big textures?

	  - Support for multiple UV sets when merging models? Some textures use one UV set, others use a different one.

	  - ideas to optimize blurring using shared memory: http://shiba.hpe.cn/jiaoyanzu/WULI/%E6%96%87%E4%BB%B6/soft/directX/Introduction_to_3D_Game_Programming_with_Directx_12.pdf
	    page 721

	  Sources: 

	  - profiling, GPU queries: http://www.reedbeta.com/blog/2011/10/12/gpu-profiling-101/

	  - calculating reflected ray direction: http://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf